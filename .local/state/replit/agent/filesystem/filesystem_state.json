{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nVetCare Chile is a modern web application for veterinary home services in Santiago, Chile. The platform provides a comprehensive solution for managing veterinary consultations, medical records, vaccinations, certificates, and exam requests through three main interfaces: a public landing page, a professional portal for veterinarians, and a client portal for pet owners. The application combines a React-based frontend with a Node.js/Express backend, utilizing Drizzle ORM for database management and Firebase for authentication and file storage.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built using React with TypeScript and follows a component-based architecture:\n\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom color variables for consistent branding (mint, lavender, turquoise, pale rose, warm beige)\n- **UI Components**: Radix UI components with shadcn/ui styling system\n- **State Management**: TanStack Query for server state management\n- **Forms**: React Hook Form with Zod validation\n\nThe application uses a modular structure with three main views:\n- Public homepage with service information and booking integration\n- Professional portal for veterinarians to manage patient records and generate exam orders\n- Owner portal for pet owners to view their pets' medical history\n\n## Backend Architecture\n\nThe backend follows a layered architecture pattern:\n\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Firebase Auth for user management\n- **File Storage**: Firebase Storage for document and image handling\n- **Development**: Vite for development server and hot module replacement\n\nThe database schema includes tables for users, pets, medical records, and vaccinations with proper foreign key relationships. The storage layer provides a clean interface for CRUD operations with both in-memory and database implementations.\n\n## Authentication and Authorization\n\nFirebase Authentication handles user management with role-based access:\n- **Veterinarians**: Full access to create and edit medical records, generate certificates\n- **Pet Owners**: Read-only access to their pets' records and documents\n- **Public Users**: Access to landing page and booking functionality\n\n## Design System\n\nThe application implements a cohesive design system:\n- **Typography**: Poppins for headings, Lato for body text\n- **Colors**: Custom CSS variables for brand colors (mint, lavender, turquoise, pale rose, warm beige)\n- **Components**: Reusable UI components with consistent styling\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n\n# External Dependencies\n\n## Firebase Services\n\n- **Firebase Auth**: User authentication and authorization\n- **Firebase Firestore**: Document storage for flexible data structures\n- **Firebase Storage**: File storage for PDFs, images, and certificates\n\n## Database\n\n- **PostgreSQL**: Primary database for structured data\n- **Neon Database**: Serverless PostgreSQL provider (based on connection string pattern)\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n## UI and Styling\n\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Headless UI components for accessibility\n- **shadcn/ui**: Pre-styled component library\n- **Lucide React**: Icon library\n- **Font Awesome**: Additional icons for branding\n\n## Development Tools\n\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety across the application\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing library\n\n## External Integrations\n\n- **Calendly**: Appointment booking integration for the public website\n- **Chilean Vaccine Database**: Autocomplete functionality for local vaccine brands (Zoetis, MSD/Nobivac)\n- **RUT Validation**: Chilean tax ID validation with modulo 11 algorithm\n- **PDF Generation**: Document generation for certificates, prescriptions, and exam orders\n- **Exam Request System**: Automated generation of medical orders with patient-specific instructions\n\n## Recent Changes (January 2025)\n\n- **SAG Export Certificate System**: Complete automated generation of official SAG export certificates following exact government format\n- **Official Document Compliance**: Auto-fills certificates with pet data, owner information, vaccination records, and veterinarian details\n- **Species-Specific Annexes**: Automatic generation of proper vaccine and deworming tables for dogs, cats, and ferrets\n- **Professional Certificate Generation**: Integrates with existing patient records to create legally compliant export documents\n- **WhatsApp Contact Integration**: Streamlined WhatsApp contact system without intrusive emergency popup\n- **WhatsApp Notification System**: Complete implementation of WhatsApp Business integration for client communications\n- **Enhanced Exam System**: Expanded to 9 exam types across 5 categories (Hematología, Bioquímica, Microbiología, Patología, Diagnóstico por Imagen)\n- **Professional Instructions**: Detailed preparation instructions, fasting requirements, and sample collection protocols for each exam type\n- **Real Veterinarian Data**: Complete integration of Dra. Alejandra Cautín Bastías professional information from HTML source\n- **Automated Notifications**: WhatsApp integration for exam reminders, appointment confirmations, result notifications, and vaccination reminders\n- **Client Communication**: Multi-channel notification system allowing veterinarians to send professional communications via WhatsApp\n- **Enhanced Database Schema**: Added comprehensive client fields including RUT validation, emergency contacts, and medical history tracking\n\n## WhatsApp Integration Features\n\n- **Exam Reminders**: Automatic generation of detailed preparation instructions via WhatsApp\n- **Appointment Confirmations**: Professional appointment confirmation messages with veterinarian details\n- **Results Notifications**: Automated alerts when exam results are ready for client review\n- **Vaccination Reminders**: Scheduled vaccination reminders with detailed vaccine information\n- **Emergency Contacts**: 24/7 emergency WhatsApp integration with direct veterinarian contact\n- **Custom Messages**: Flexible message system for personalized client communications\n\nThe architecture now includes full WhatsApp Business API integration supporting Chilean phone number formatting and professional veterinary communication templates.\n\n## SAG Certificate Integration\n\nThe platform now generates official export certificates compliant with Chilean Agricultural and Livestock Service (SAG) requirements:\n\n- **Automated Data Population**: Extracts patient, owner, and veterinarian information from existing records\n- **Official Format Compliance**: Follows exact SAG document structure with proper sections and annexes\n- **Species-Specific Requirements**: Generates appropriate vaccine tables for dogs (ANEXO 2), cats (ANEXO 1), and ferrets (ANEXO 3)\n- **Professional Validation**: Includes veterinarian signature areas and official certification language\n- **Print-Ready Output**: Opens in new window with proper formatting for immediate printing or PDF generation","size_bytes":7410},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        mint: \"var(--mint)\",\n        lavender: \"var(--lavender)\",\n        turquoise: \"var(--turquoise)\",\n        palerose: \"var(--palerose)\",\n        warmbeige: \"var(--warmbeige)\",\n        darkgray: \"var(--darkgray)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        poppins: [\"var(--font-poppins)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3026},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":998},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\", { enum: [\"veterinarian\", \"owner\"] }).notNull(),\n  name: text(\"name\").notNull(),\n  rut: text(\"rut\").unique(), // Chilean RUT for owners\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  commune: text(\"commune\"), // Chilean commune\n  emergencyContact: text(\"emergency_contact\"),\n  emergencyPhone: text(\"emergency_phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pets = pgTable(\"pets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  species: text(\"species\", { enum: [\"Canino\", \"Felino\", \"Ave\", \"Conejo\", \"Otro\"] }).notNull(),\n  breed: text(\"breed\"),\n  sex: text(\"sex\", { enum: [\"Macho\", \"Hembra\"] }),\n  birthDate: timestamp(\"birth_date\"),\n  weight: text(\"weight\"),\n  color: text(\"color\"),\n  microchip: text(\"microchip\"),\n  photo: text(\"photo\"),\n  recordNumber: text(\"record_number\").unique(),\n  sterilized: boolean(\"sterilized\").default(false),\n  sterilizationDate: timestamp(\"sterilization_date\"),\n  allergies: text(\"allergies\"),\n  chronicConditions: text(\"chronic_conditions\"),\n  currentMedications: text(\"current_medications\"),\n  diet: text(\"diet\"),\n  activityLevel: text(\"activity_level\"),\n  anamnesis: text(\"anamnesis\"), // Remote anamnesis\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  petId: varchar(\"pet_id\").notNull().references(() => pets.id),\n  veterinarianId: varchar(\"veterinarian_id\").notNull().references(() => users.id),\n  type: text(\"type\", { enum: [\"consultation\", \"vaccination\", \"deworming\", \"examination\", \"certificate\", \"prescription\"] }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  diagnosis: text(\"diagnosis\"),\n  treatment: text(\"treatment\"),\n  notes: text(\"notes\"),\n  documents: json(\"documents\").$type<string[]>().default([]),\n  // Detailed consultation fields\n  chiefComplaint: text(\"chief_complaint\"),\n  symptoms: text(\"symptoms\"),\n  symptomDuration: text(\"symptom_duration\"),\n  recentChanges: text(\"recent_changes\"),\n  currentMedications: text(\"current_medications\"),\n  allergies: text(\"allergies\"),\n  eliminationHabits: text(\"elimination_habits\"),\n  currentDiet: text(\"current_diet\"),\n  activityLevel: text(\"activity_level\"),\n  environment: text(\"environment\"),\n  // Physical examination\n  temperature: text(\"temperature\"),\n  heartRate: text(\"heart_rate\"),\n  respiratoryRate: text(\"respiratory_rate\"),\n  capillaryRefillTime: text(\"capillary_refill_time\"),\n  physicalFindings: text(\"physical_findings\"),\n  // Diagnosis and plan\n  presumptiveDiagnosis: text(\"presumptive_diagnosis\"),\n  differentialDiagnosis: text(\"differential_diagnosis\"),\n  diagnosticPlan: text(\"diagnostic_plan\"),\n  therapeuticPlan: text(\"therapeutic_plan\"),\n  followUp: text(\"follow_up\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vaccinations = pgTable(\"vaccinations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  petId: varchar(\"pet_id\").notNull().references(() => pets.id),\n  veterinarianId: varchar(\"veterinarian_id\").notNull().references(() => users.id),\n  vaccineName: text(\"vaccine_name\").notNull(),\n  laboratory: text(\"laboratory\").notNull(),\n  batch: text(\"batch\"),\n  expiryDate: timestamp(\"expiry_date\"),\n  applicationDate: timestamp(\"application_date\").notNull(),\n  pathogens: json(\"pathogens\").$type<string[]>().default([]),\n  nextDueDate: timestamp(\"next_due_date\"),\n  certificate: text(\"certificate\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const dewormings = pgTable(\"dewormings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  petId: varchar(\"pet_id\").notNull().references(() => pets.id),\n  veterinarianId: varchar(\"veterinarian_id\").notNull().references(() => users.id),\n  product: text(\"product\").notNull(),\n  dose: text(\"dose\"),\n  applicationDate: timestamp(\"application_date\").notNull(),\n  nextDueDate: timestamp(\"next_due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// New table for detailed examination orders and results\nexport const examinations = pgTable(\"examinations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  petId: varchar(\"pet_id\").notNull().references(() => pets.id),\n  veterinarianId: varchar(\"veterinarian_id\").notNull().references(() => users.id),\n  type: text(\"type\", { enum: [\"order\", \"result\"] }).notNull(),\n  examType: text(\"exam_type\", { \n    enum: [\"hemograma\", \"bioquimica\", \"orina\", \"coprologico\", \"radiografia\", \"ecografia\", \"cultivo\", \"citologia\", \"histopatologia\", \"otros\"] \n  }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  urgency: text(\"urgency\", { enum: [\"normal\", \"urgente\", \"emergencia\"] }).default(\"normal\"),\n  fastingRequired: boolean(\"fasting_required\").default(false),\n  instructions: text(\"instructions\"),\n  observations: text(\"observations\"),\n  results: text(\"results\"),\n  interpretation: text(\"interpretation\"),\n  recommendations: text(\"recommendations\"),\n  fileUrl: text(\"file_url\"),\n  fileName: text(\"file_name\"),\n  laboratoryName: text(\"laboratory_name\"),\n  referenceValues: json(\"reference_values\"),\n  status: text(\"status\", { enum: [\"pendiente\", \"en_proceso\", \"completado\", \"cancelado\"] }).default(\"pendiente\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const certificates = pgTable(\"certificates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  petId: varchar(\"pet_id\").notNull().references(() => pets.id),\n  veterinarianId: varchar(\"veterinarian_id\").notNull().references(() => users.id),\n  type: text(\"type\", { enum: [\"health\", \"export\", \"vaccination\"] }).notNull(),\n  issuedDate: timestamp(\"issued_date\").notNull(),\n  validUntil: timestamp(\"valid_until\"),\n  content: json(\"content\"),\n  pdfUrl: text(\"pdf_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  role: true,\n  name: true,\n  rut: true,\n  phone: true,\n  address: true,\n  commune: true,\n  emergencyContact: true,\n  emergencyPhone: true,\n});\n\nexport const insertPetSchema = createInsertSchema(pets).pick({\n  ownerId: true,\n  name: true,\n  species: true,\n  breed: true,\n  sex: true,\n  birthDate: true,\n  weight: true,\n  color: true,\n  microchip: true,\n  photo: true,\n  recordNumber: true,\n  sterilized: true,\n  sterilizationDate: true,\n  allergies: true,\n  chronicConditions: true,\n  currentMedications: true,\n  diet: true,\n  activityLevel: true,\n  anamnesis: true,\n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).pick({\n  petId: true,\n  veterinarianId: true,\n  type: true,\n  date: true,\n  diagnosis: true,\n  treatment: true,\n  notes: true,\n  documents: true,\n  chiefComplaint: true,\n  symptoms: true,\n  symptomDuration: true,\n  recentChanges: true,\n  currentMedications: true,\n  allergies: true,\n  eliminationHabits: true,\n  currentDiet: true,\n  activityLevel: true,\n  environment: true,\n  temperature: true,\n  heartRate: true,\n  respiratoryRate: true,\n  capillaryRefillTime: true,\n  physicalFindings: true,\n  presumptiveDiagnosis: true,\n  differentialDiagnosis: true,\n  diagnosticPlan: true,\n  therapeuticPlan: true,\n  followUp: true,\n});\n\nexport const insertExaminationSchema = createInsertSchema(examinations).pick({\n  petId: true,\n  veterinarianId: true,\n  type: true,\n  examType: true,\n  date: true,\n  urgency: true,\n  fastingRequired: true,\n  instructions: true,\n  observations: true,\n  results: true,\n  interpretation: true,\n  recommendations: true,\n  fileUrl: true,\n  fileName: true,\n  laboratoryName: true,\n  referenceValues: true,\n  status: true,\n});\n\nexport const insertVaccinationSchema = createInsertSchema(vaccinations).pick({\n  petId: true,\n  veterinarianId: true,\n  vaccineName: true,\n  laboratory: true,\n  batch: true,\n  expiryDate: true,\n  applicationDate: true,\n  pathogens: true,\n  nextDueDate: true,\n  certificate: true,\n});\n\nexport const insertDewormingSchema = createInsertSchema(dewormings).pick({\n  petId: true,\n  veterinarianId: true,\n  product: true,\n  dose: true,\n  applicationDate: true,\n  nextDueDate: true,\n});\n\nexport const insertCertificateSchema = createInsertSchema(certificates).pick({\n  petId: true,\n  veterinarianId: true,\n  type: true,\n  issuedDate: true,\n  validUntil: true,\n  content: true,\n  pdfUrl: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPet = z.infer<typeof insertPetSchema>;\nexport type Pet = typeof pets.$inferSelect;\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\nexport type InsertVaccination = z.infer<typeof insertVaccinationSchema>;\nexport type Vaccination = typeof vaccinations.$inferSelect;\nexport type InsertDeworming = z.infer<typeof insertDewormingSchema>;\nexport type Deworming = typeof dewormings.$inferSelect;\nexport type InsertCertificate = z.infer<typeof insertCertificateSchema>;\nexport type Certificate = typeof certificates.$inferSelect;\nexport type InsertExamination = z.infer<typeof insertExaminationSchema>;\nexport type Examination = typeof examinations.$inferSelect;\n","size_bytes":9692},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport HomePage from \"@/pages/HomePage\";\nimport ProfessionalPortal from \"@/pages/ProfessionalPortal\";\nimport OwnerPortal from \"@/pages/OwnerPortal\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/portal/profesional\" component={ProfessionalPortal} />\n      <Route path=\"/portal/tutor\" component={OwnerPortal} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1053},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Lato:wght@300;400;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(43, 33%, 91%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(43, 33%, 95%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(156, 73%, 70%);\n  --primary-foreground: hsl(210, 25%, 7.8431%);\n  --secondary: hsl(249, 100%, 92%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(180, 100%, 90%);\n  --accent-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(156, 73%, 70%);\n  --mint: hsl(156, 73%, 70%);\n  --lavender: hsl(249, 100%, 92%);\n  --turquoise: hsl(180, 100%, 90%);\n  --palerose: hsl(15, 100%, 93%);\n  --warmbeige: hsl(43, 33%, 91%);\n  --darkgray: hsl(210, 25%, 7.8431%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(43, 33%, 95%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(156, 73%, 70%);\n  --sidebar-primary-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-accent: hsl(180, 100%, 90%);\n  --sidebar-accent-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(156, 73%, 70%);\n  --font-sans: 'Lato', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-poppins: 'Poppins', sans-serif;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 1px 2px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 1px 2px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 2px 4px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 4px 6px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 8px 10px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(156, 73%, 70%);\n  --primary-foreground: hsl(210, 25%, 7.8431%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(156, 73%, 70%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(156, 73%, 70%);\n  --mint: hsl(156, 73%, 70%);\n  --lavender: hsl(249, 100%, 92%);\n  --turquoise: hsl(180, 100%, 90%);\n  --palerose: hsl(15, 100%, 93%);\n  --warmbeige: hsl(43, 33%, 91%);\n  --darkgray: hsl(210, 25%, 7.8431%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(156, 73%, 70%);\n  --sidebar-primary-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(156, 73%, 70%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(156, 73%, 70%);\n  --font-sans: 'Lato', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-poppins: 'Poppins', sans-serif;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 1px 2px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 1px 2px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 2px 4px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 4px 6px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00), 0px 8px 10px -1px hsl(156, 73%, 70% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(156, 73%, 70% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-poppins);\n  }\n}\n\n.mint {\n  @apply bg-mint;\n}\n\n.lavender {\n  @apply bg-lavender;\n}\n\n.turquoise {\n  @apply bg-turquoise;\n}\n\n.palerose {\n  @apply bg-palerose;\n}\n\n.warmbeige {\n  @apply bg-warmbeige;\n}\n\n.darkgray {\n  @apply text-darkgray;\n}\n\n.font-poppins {\n  font-family: var(--font-poppins);\n}\n\n.font-lato {\n  font-family: var(--font-sans);\n}\n","size_bytes":5670},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/About.tsx":{"content":"const About = () => {\n  return (\n    <section id=\"quien-soy\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-6\">Dra. María González</h2>\n            <p className=\"text-lg text-gray-600 font-lato leading-relaxed\">\n              Con más de 10 años de experiencia en medicina veterinaria, me especializo en atención domiciliaria porque creo que las mascotas se sienten más cómodas y seguras en su hogar.\n            </p>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-mint p-3 rounded-full\">\n                  <i className=\"fas fa-graduation-cap text-darkgray text-xl\"></i>\n                </div>\n                <div>\n                  <h4 className=\"font-poppins font-semibold text-darkgray\">Veterinaria Universidad de Chile</h4>\n                  <p className=\"text-gray-600 font-lato\">Titulada con distinción máxima</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-lavender p-3 rounded-full\">\n                  <i className=\"fas fa-certificate text-darkgray text-xl\"></i>\n                </div>\n                <div>\n                  <h4 className=\"font-poppins font-semibold text-darkgray\">Especialización en Medicina Interna</h4>\n                  <p className=\"text-gray-600 font-lato\">Diplomado en pequeños animales</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-turquoise p-3 rounded-full\">\n                  <i className=\"fas fa-heart text-darkgray text-xl\"></i>\n                </div>\n                <div>\n                  <h4 className=\"font-poppins font-semibold text-darkgray\">10+ años de experiencia</h4>\n                  <p className=\"text-gray-600 font-lato\">Más de 5000 mascotas atendidas</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <img \n              src=\"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n              alt=\"Dra. María González veterinaria\" \n              className=\"rounded-3xl shadow-2xl w-full h-auto\" \n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default About;\n","size_bytes":2674},"client/src/components/Booking.tsx":{"content":"const Booking = () => {\n  const openCalendly = () => {\n    // Open Calendly widget or redirect to Calendly page\n    window.open('https://calendly.com/vetcare-chile', '_blank');\n  };\n\n  const paymentMethods = [\n    { icon: \"fas fa-credit-card\", label: \"Tarjetas\", color: \"text-mint\" },\n    { icon: \"fas fa-university\", label: \"Transferencia\", color: \"text-lavender\" },\n    { icon: \"fas fa-money-bill-wave\", label: \"Efectivo\", color: \"text-turquoise\" },\n    { icon: \"fas fa-mobile-alt\", label: \"Red Compra\", color: \"text-palerose\" }\n  ];\n\n  return (\n    <section id=\"agendar\" className=\"py-20 bg-gradient-to-br from-mint to-turquoise\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <h2 className=\"text-4xl font-poppins font-bold text-white mb-6\">Agenda tu Cita</h2>\n        <p className=\"text-xl text-white font-lato mb-12 max-w-3xl mx-auto\">\n          Selecciona el día y hora que mejor te convenga. Nos pondremos en contacto contigo para confirmar los detalles.\n        </p>\n        \n        {/* Calendly Integration */}\n        <div className=\"bg-white p-8 rounded-3xl shadow-2xl max-w-4xl mx-auto\">\n          <div className=\"text-center py-16\">\n            <i className=\"fas fa-calendar-alt text-6xl text-mint mb-6\"></i>\n            <h3 className=\"text-2xl font-poppins font-semibold text-darkgray mb-4\">Calendario de Reservas</h3>\n            <p className=\"text-gray-600 font-lato mb-8\">Agenda tu cita de manera fácil y rápida</p>\n            <button \n              onClick={openCalendly}\n              className=\"bg-mint text-darkgray px-8 py-4 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all\"\n            >\n              <i className=\"fas fa-external-link-alt mr-2\"></i>\n              Abrir Calendario\n            </button>\n          </div>\n        </div>\n\n        {/* Payment Methods */}\n        <div className=\"mt-16\">\n          <h3 className=\"text-2xl font-poppins font-semibold text-white mb-8\">Métodos de Pago</h3>\n          <div className=\"grid md:grid-cols-4 gap-6 max-w-4xl mx-auto\">\n            {paymentMethods.map((method, index) => (\n              <div key={index} className=\"bg-white p-6 rounded-xl shadow-lg\">\n                <i className={`${method.icon} text-3xl ${method.color} mb-3`}></i>\n                <p className=\"font-poppins font-medium text-darkgray\">{method.label}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Booking;\n","size_bytes":2492},"client/src/components/Contact.tsx":{"content":"import { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { WhatsAppService } from '@/lib/whatsapp';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    message: ''\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor completa todos los campos requeridos\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Here you would typically send the form data to your backend or email service\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Mensaje enviado\",\n        description: \"Nos pondremos en contacto contigo pronto\",\n      });\n      \n      // Reset form\n      setFormData({ name: '', email: '', phone: '', message: '' });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar el mensaje. Intenta nuevamente.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleWhatsAppClick = () => {\n    const message = `Hola! Me gustaría obtener más información sobre los servicios veterinarios a domicilio de VetCare Chile.\n\n¿Podrían ayudarme con:\n- Información sobre servicios disponibles\n- Precios y horarios\n- Agendar una consulta\n\nGracias!`;\n\n    WhatsAppService.openWhatsApp(\"+56912345678\", message);\n  };\n\n  const contactInfo = [\n    {\n      icon: \"fas fa-phone\",\n      title: \"Teléfono\",\n      value: \"+56 9 1234 5678\",\n      color: \"bg-mint\",\n      action: () => window.open(\"tel:+56912345678\")\n    },\n    {\n      icon: \"fas fa-envelope\",\n      title: \"Email\",\n      value: \"info@vetcarechile.com\",\n      color: \"bg-lavender\",\n      action: () => window.open(\"mailto:info@vetcarechile.com\")\n    },\n    {\n      icon: \"fab fa-whatsapp\",\n      title: \"WhatsApp\",\n      value: \"+56 9 1234 5678\",\n      color: \"bg-green-500\",\n      action: handleWhatsAppClick\n    },\n    {\n      icon: \"fas fa-clock\",\n      title: \"Horarios\",\n      value: \"Lun-Vie: 8:00-20:00 | Sáb: 9:00-14:00\",\n      color: \"bg-palerose\"\n    }\n  ];\n\n  return (\n    <section id=\"contacto\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-4\">Contacto</h2>\n          <p className=\"text-xl text-gray-600\">Estamos aquí para ayudarte y resolver tus dudas</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            {contactInfo.map((info, index) => (\n              <div \n                key={index} \n                className={`flex items-center space-x-4 ${info.action ? 'cursor-pointer hover:scale-105 transition-transform' : ''}`}\n                onClick={info.action}\n              >\n                <div className={`${info.color} p-4 rounded-full ${info.action ? 'hover:shadow-lg' : ''}`}>\n                  <i className={`${info.icon} text-white text-2xl`}></i>\n                </div>\n                <div>\n                  <h3 className=\"font-poppins font-semibold text-darkgray text-xl\">{info.title}</h3>\n                  <p className=\"text-gray-600 font-lato\">{info.value}</p>\n                  {info.title === \"WhatsApp\" && (\n                    <p className=\"text-sm text-green-600 font-lato mt-1\">¡Haz clic para chatear!</p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"bg-gradient-to-br from-warmbeige to-white p-8 rounded-3xl shadow-lg\">\n            <h3 className=\"text-2xl font-poppins font-semibold text-darkgray mb-6\">Envíanos un Mensaje</h3>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <label className=\"block text-darkgray font-poppins font-medium mb-2\">Nombre completo *</label>\n                <input \n                  type=\"text\" \n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  className=\"w-full p-4 rounded-xl border-2 border-gray-200 focus:border-mint focus:outline-none font-lato\" \n                  placeholder=\"Tu nombre\" \n                  required\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-darkgray font-poppins font-medium mb-2\">Email *</label>\n                <input \n                  type=\"email\" \n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full p-4 rounded-xl border-2 border-gray-200 focus:border-lavender focus:outline-none font-lato\" \n                  placeholder=\"tu@email.com\" \n                  required\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-darkgray font-poppins font-medium mb-2\">Teléfono</label>\n                <input \n                  type=\"tel\" \n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleChange}\n                  className=\"w-full p-4 rounded-xl border-2 border-gray-200 focus:border-turquoise focus:outline-none font-lato\" \n                  placeholder=\"+56 9 1234 5678\" \n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-darkgray font-poppins font-medium mb-2\">Mensaje *</label>\n                <textarea \n                  rows={4} \n                  name=\"message\"\n                  value={formData.message}\n                  onChange={handleChange}\n                  className=\"w-full p-4 rounded-xl border-2 border-gray-200 focus:border-palerose focus:outline-none font-lato\" \n                  placeholder=\"Cuéntanos sobre tu mascota y cómo podemos ayudarte\"\n                  required\n                />\n              </div>\n              \n              <button \n                type=\"submit\" \n                className=\"w-full bg-mint text-darkgray py-4 px-8 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all\"\n              >\n                <i className=\"fas fa-paper-plane mr-2\"></i>\n                Enviar Mensaje\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","size_bytes":6883},"client/src/components/FAQ.tsx":{"content":"import { useState } from 'react';\n\nconst FAQ = () => {\n  const [openFAQ, setOpenFAQ] = useState<number | null>(null);\n\n  const faqItems = [\n    {\n      question: \"¿Qué servicios incluye una consulta domiciliaria?\",\n      answer: \"Incluye examen físico completo, diagnóstico, plan de tratamiento, y seguimiento. También proporcionamos certificados cuando sea necesario.\",\n      gradient: \"from-turquoise to-mint\"\n    },\n    {\n      question: \"¿Atienden emergencias?\",\n      answer: \"Sí, tenemos disponibilidad para emergencias. Contáctanos al WhatsApp y evaluaremos la urgencia de tu caso.\",\n      gradient: \"from-lavender to-palerose\"\n    },\n    {\n      question: \"¿Cómo accedo a los portales?\",\n      answer: \"Los tutores y veterinarios tienen portales separados con acceso mediante email y contraseña. Te proporcionamos las credenciales tras la primera consulta.\",\n      gradient: \"from-palerose to-turquoise\"\n    },\n    {\n      question: \"¿Cuál es el costo de una consulta?\",\n      answer: \"Los precios varían según el tipo de consulta y ubicación. Contáctanos para obtener una cotización personalizada.\",\n      gradient: \"from-mint to-lavender\"\n    }\n  ];\n\n  const toggleFAQ = (index: number) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <section id=\"faq\" className=\"py-20 bg-white\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-4\">Preguntas Frecuentes</h2>\n          <p className=\"text-xl text-gray-600\">Resolvemos las dudas más comunes</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {faqItems.map((item, index) => (\n            <div key={index} className={`bg-gradient-to-r ${item.gradient} p-6 rounded-xl shadow-lg`}>\n              <button \n                className=\"w-full text-left flex justify-between items-center focus:outline-none\"\n                onClick={() => toggleFAQ(index)}\n              >\n                <h3 className=\"text-xl font-poppins font-semibold text-darkgray\">{item.question}</h3>\n                <i className={`fas fa-chevron-down text-darkgray transform transition-transform ${openFAQ === index ? 'rotate-180' : ''}`}></i>\n              </button>\n              {openFAQ === index && (\n                <div className=\"mt-4 text-darkgray font-lato leading-relaxed\">\n                  {item.answer}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FAQ;\n","size_bytes":2580},"client/src/components/Hero.tsx":{"content":"const Hero = () => {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section id=\"inicio\" className=\"pt-20 bg-gradient-to-br from-turquoise to-palerose min-h-screen flex items-center\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <h1 className=\"text-4xl md:text-6xl font-poppins font-bold text-darkgray leading-tight\">\n              Atención Veterinaria a Domicilio con \n              <span className=\"text-mint\"> Amor</span> y \n              <span className=\"text-lavender\"> Profesionalismo</span>\n            </h1>\n            <p className=\"text-xl text-darkgray font-lato leading-relaxed\">\n              Cuidamos a tu mascota en la comodidad de tu hogar. Servicios veterinarios especializados con el cariño que tu compañero peludo merece.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <button \n                onClick={() => scrollToSection('agendar')}\n                className=\"bg-mint text-darkgray px-8 py-4 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all text-center\"\n              >\n                <i className=\"fas fa-calendar-plus mr-2\"></i>\n                Agendar Hora\n              </button>\n              <button \n                onClick={() => scrollToSection('servicios')}\n                className=\"bg-white text-darkgray px-8 py-4 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all\"\n              >\n                Ver Servicios\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <img \n              src=\"https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n              alt=\"Yorkshire Terrier feliz en casa\" \n              className=\"rounded-3xl shadow-2xl w-full h-auto\" \n            />\n            <div className=\"absolute -bottom-4 -right-4 bg-white p-4 rounded-2xl shadow-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-shield-alt text-mint text-2xl\"></i>\n                <div>\n                  <p className=\"font-poppins font-semibold text-darkgray\">100% Seguro</p>\n                  <p className=\"text-sm text-gray-600\">Veterinarios certificados</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Hero;\n","size_bytes":2745},"client/src/components/LoginModal.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { signInUser } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  type: 'tutor' | 'profesional';\n}\n\nconst LoginModal: React.FC<LoginModalProps> = ({ isOpen, onClose, type }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      // Demo mode - allow access with demo credentials or skip Firebase for testing\n      if (email === 'demo@veterinario.com' || email === 'demo@tutor.com') {\n        toast({\n          title: \"Modo demostración activado\",\n          description: `Accediendo al portal ${type === 'tutor' ? 'del tutor' : 'profesional'} en modo demo`,\n        });\n        \n        // Redirect to appropriate portal\n        setLocation(type === 'tutor' ? '/portal/tutor' : '/portal/profesional');\n        onClose();\n      } else {\n        // Try Firebase authentication\n        await signInUser(email, password);\n        toast({\n          title: \"Acceso exitoso\",\n          description: `Bienvenido al portal ${type === 'tutor' ? 'del tutor' : 'profesional'}`,\n        });\n        \n        // Redirect to appropriate portal\n        setLocation(type === 'tutor' ? '/portal/tutor' : '/portal/profesional');\n        onClose();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error de acceso\",\n        description: \"Email o contraseña incorrectos. Prueba con demo@veterinario.com para modo demostración\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setEmail('');\n    setPassword('');\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"text-center mb-4\">\n            <i className=\"fas fa-user-circle text-4xl text-mint mb-4\"></i>\n            <DialogTitle className=\"text-2xl font-poppins font-bold text-darkgray\">\n              {type === 'tutor' ? 'Portal del Tutor' : 'Portal Profesional'}\n            </DialogTitle>\n            <p className=\"text-gray-600 font-lato mt-2\">\n              {type === 'tutor' ? 'Accede al historial de tus mascotas' : 'Gestiona fichas clínicas y certificados'}\n            </p>\n            <p className=\"text-sm text-turquoise font-lato mt-1\">\n              Para demostración, usa: demo@{type === 'tutor' ? 'tutor' : 'veterinario'}.com\n            </p>\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"email\" className=\"text-darkgray font-poppins font-medium\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"tu@email.com\"\n              className=\"mt-2 p-4 rounded-xl border-2 border-gray-200 focus:border-mint\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\" className=\"text-darkgray font-poppins font-medium\">Contraseña</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"••••••••\"\n              className=\"mt-2 p-4 rounded-xl border-2 border-gray-200 focus:border-lavender\"\n              required\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            disabled={loading}\n            className=\"w-full bg-mint text-darkgray py-4 px-8 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all\"\n          >\n            {loading ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Iniciando...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                Iniciar Sesión\n              </>\n            )}\n          </Button>\n          \n          <div className=\"text-center\">\n            <button type=\"button\" className=\"text-turquoise font-poppins font-medium hover:underline\">\n              ¿Olvidaste tu contraseña?\n            </button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default LoginModal;\n","size_bytes":4958},"client/src/components/Navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport LoginModal from './LoginModal';\n\nconst Navigation = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [loginModalOpen, setLoginModalOpen] = useState(false);\n  const [loginType, setLoginType] = useState<'tutor' | 'profesional'>('tutor');\n  const { user, signOut } = useAuth();\n\n  const showLoginModal = (type: 'tutor' | 'profesional') => {\n    setLoginType(type);\n    setLoginModalOpen(true);\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <>\n      <nav className=\"bg-white shadow-lg fixed w-full top-0 z-50\" id=\"navbar\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-heart text-palerose text-2xl\"></i>\n              <h1 className=\"text-2xl font-poppins font-bold text-darkgray\">VetCare Chile</h1>\n            </Link>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden lg:flex items-center space-x-8\">\n              <button \n                onClick={() => scrollToSection('inicio')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Inicio\n              </button>\n              <button \n                onClick={() => scrollToSection('quien-soy')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Quién Soy\n              </button>\n              <button \n                onClick={() => scrollToSection('servicios')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Servicios\n              </button>\n              <button \n                onClick={() => scrollToSection('agendar')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Agendar Cita\n              </button>\n              <button \n                onClick={() => scrollToSection('faq')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                FAQ\n              </button>\n              <button \n                onClick={() => scrollToSection('recursos')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Recursos\n              </button>\n              <button \n                onClick={() => scrollToSection('contacto')}\n                className=\"text-darkgray hover:text-mint font-medium transition-colors\"\n              >\n                Contacto\n              </button>\n              \n              {user ? (\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-darkgray\">Hola, {user.email}</span>\n                  <button \n                    onClick={signOut}\n                    className=\"bg-destructive text-white px-4 py-2 rounded-lg hover:bg-opacity-80 transition-all\"\n                  >\n                    Cerrar Sesión\n                  </button>\n                </div>\n              ) : (\n                <div className=\"flex space-x-3\">\n                  <button \n                    onClick={() => showLoginModal('tutor')}\n                    className=\"bg-lavender text-darkgray px-4 py-2 rounded-lg hover:bg-opacity-80 transition-all\"\n                  >\n                    Portal Tutor\n                  </button>\n                  <button \n                    onClick={() => showLoginModal('profesional')}\n                    className=\"bg-mint text-darkgray px-4 py-2 rounded-lg hover:bg-opacity-80 transition-all\"\n                  >\n                    Portal Veterinario\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Mobile Menu Button */}\n            <button \n              className=\"lg:hidden text-darkgray\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            >\n              <i className=\"fas fa-bars text-2xl\"></i>\n            </button>\n          </div>\n\n          {/* Mobile Navigation */}\n          {mobileMenuOpen && (\n            <div className=\"lg:hidden\">\n              <div className=\"py-4 space-y-4\">\n                <button \n                  onClick={() => scrollToSection('inicio')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Inicio\n                </button>\n                <button \n                  onClick={() => scrollToSection('quien-soy')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Quién Soy\n                </button>\n                <button \n                  onClick={() => scrollToSection('servicios')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Servicios\n                </button>\n                <button \n                  onClick={() => scrollToSection('agendar')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Agendar Cita\n                </button>\n                <button \n                  onClick={() => scrollToSection('faq')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  FAQ\n                </button>\n                <button \n                  onClick={() => scrollToSection('recursos')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Recursos\n                </button>\n                <button \n                  onClick={() => scrollToSection('contacto')}\n                  className=\"block text-darkgray hover:text-mint font-medium w-full text-left\"\n                >\n                  Contacto\n                </button>\n                \n                {user ? (\n                  <div className=\"pt-4 space-y-3\">\n                    <p className=\"text-darkgray\">Hola, {user.email}</p>\n                    <button \n                      onClick={signOut}\n                      className=\"w-full bg-destructive text-white px-4 py-2 rounded-lg\"\n                    >\n                      Cerrar Sesión\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"pt-4 space-y-3\">\n                    <button \n                      onClick={() => showLoginModal('tutor')}\n                      className=\"w-full bg-lavender text-darkgray px-4 py-2 rounded-lg\"\n                    >\n                      Portal Tutor\n                    </button>\n                    <button \n                      onClick={() => showLoginModal('profesional')}\n                      className=\"w-full bg-mint text-darkgray px-4 py-2 rounded-lg\"\n                    >\n                      Portal Veterinario\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      <LoginModal \n        isOpen={loginModalOpen}\n        onClose={() => setLoginModalOpen(false)}\n        type={loginType}\n      />\n    </>\n  );\n};\n\nexport default Navigation;\n","size_bytes":7732},"client/src/components/Resources.tsx":{"content":"const Resources = () => {\n  const resources = [\n    {\n      title: \"Guía de Cuidado Básico\",\n      description: \"Consejos esenciales para el cuidado diario de tu mascota\",\n      image: \"https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      action: \"Descargar PDF\",\n      icon: \"fas fa-download\",\n      color: \"text-mint\"\n    },\n    {\n      title: \"Calendario de Vacunación\",\n      description: \"Programa completo de vacunas por edad\",\n      image: \"https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      action: \"Ver Calendario\",\n      icon: \"fas fa-calendar-alt\",\n      color: \"text-lavender\"\n    },\n    {\n      title: \"Primeros Auxilios\",\n      description: \"Qué hacer en situaciones de emergencia\",\n      image: \"https://images.unsplash.com/photo-1581888227599-779811939961?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      action: \"Leer Guía\",\n      icon: \"fas fa-first-aid\",\n      color: \"text-turquoise\"\n    }\n  ];\n\n  return (\n    <section id=\"recursos\" className=\"py-20 bg-warmbeige\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-4\">Recursos para Tutores</h2>\n          <p className=\"text-xl text-gray-600\">Información útil para el cuidado de tu mascota</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {resources.map((resource, index) => (\n            <div key={index} className=\"bg-white p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all\">\n              <div className=\"text-center mb-6\">\n                <img \n                  src={resource.image} \n                  alt={resource.title} \n                  className=\"rounded-xl w-full h-48 object-cover mb-4\" \n                />\n                <h3 className=\"text-2xl font-poppins font-semibold text-darkgray mb-3\">{resource.title}</h3>\n                <p className=\"text-gray-600 font-lato\">{resource.description}</p>\n              </div>\n              <button className={`inline-flex items-center ${resource.color} font-poppins font-medium hover:underline`}>\n                <i className={`${resource.icon} mr-2`}></i>\n                {resource.action}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Resources;\n","size_bytes":2632},"client/src/components/Services.tsx":{"content":"const Services = () => {\n  const services = [\n    {\n      icon: \"fas fa-stethoscope\",\n      title: \"Consultas Generales\",\n      description: \"Exámenes de rutina, diagnósticos y tratamientos en la comodidad de tu hogar.\",\n      features: [\"Examen físico completo\", \"Diagnóstico profesional\", \"Plan de tratamiento\"],\n      gradient: \"from-mint to-turquoise\",\n      textColor: \"text-white\"\n    },\n    {\n      icon: \"fas fa-syringe\",\n      title: \"Vacunación\",\n      description: \"Plan completo de vacunación y certificados oficiales.\",\n      features: [\"Vacunas Zoetis y MSD/Nobivac\", \"Certificados automáticos\", \"Seguimiento personalizado\"],\n      gradient: \"from-lavender to-palerose\",\n      textColor: \"text-darkgray\"\n    },\n    {\n      icon: \"fas fa-pills\",\n      title: \"Desparasitación\",\n      description: \"Tratamientos preventivos y curativos contra parásitos internos y externos.\",\n      features: [\"Evaluación parasitaria\", \"Tratamiento específico\", \"Plan preventivo\"],\n      gradient: \"from-palerose to-turquoise\",\n      textColor: \"text-darkgray\"\n    },\n    {\n      icon: \"fas fa-file-medical\",\n      title: \"Certificados\",\n      description: \"Emisión de certificados sanitarios y de exportación oficial.\",\n      features: [\"Certificados de salud\", \"Certificados de exportación\", \"Documentación oficial\"],\n      gradient: \"from-turquoise to-mint\",\n      textColor: \"text-darkgray\"\n    },\n    {\n      icon: \"fas fa-microscope\",\n      title: \"Exámenes\",\n      description: \"Análisis de laboratorio y exámenes complementarios.\",\n      features: [\"Análisis de sangre\", \"Exámenes de orina\", \"Estudios especializados\"],\n      gradient: \"from-palerose to-lavender\",\n      textColor: \"text-darkgray\"\n    },\n    {\n      icon: \"fas fa-home\",\n      title: \"Atención Domiciliaria\",\n      description: \"Comodidad total para tu mascota en su ambiente familiar.\",\n      features: [\"Sin estrés para tu mascota\", \"Atención personalizada\", \"Equipos portátiles\"],\n      gradient: \"from-mint to-palerose\",\n      textColor: \"text-darkgray\"\n    }\n  ];\n\n  return (\n    <section id=\"servicios\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-4\">Nuestros Servicios</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">Ofrecemos atención integral para tu mascota sin salir de casa</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {services.map((service, index) => (\n            <div key={index} className={`bg-gradient-to-br ${service.gradient} p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all`}>\n              <div className={`${service.textColor} mb-6`}>\n                <i className={`${service.icon} text-4xl mb-4`}></i>\n                <h3 className=\"text-2xl font-poppins font-semibold mb-3\">{service.title}</h3>\n                <p className=\"font-lato\">{service.description}</p>\n              </div>\n              <ul className={`${service.textColor} space-y-2 font-lato`}>\n                {service.features.map((feature, featureIndex) => (\n                  <li key={featureIndex}>\n                    <i className=\"fas fa-check-circle mr-2\"></i>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Services;\n","size_bytes":3501},"client/src/config/veterinarian.ts":{"content":"// CONFIGURACIÓN PROFESIONAL - EDITA AQUÍ TU INFORMACIÓN PERSONAL\n// Este archivo contiene toda tu información profesional que aparecerá\n// en el portal, certificados y documentos generados\n\nexport const veterinarianConfig = {\n  // INFORMACIÓN BÁSICA\n  name: 'Dra. Alejandra Cautín Bastías',         // Nombre completo\n  title: 'Médica Veterinaria',                   // Título profesional\n  speciality: 'Medicina Preventiva e Integrativa', // Especialidad\n  license: 'MV - Colegio Médicos Veterinarios',  // Número de colegiatura\n  \n  // CONTACTO\n  phone: '+56 9 7604 0797',                      // Teléfono principal\n  email: 'avmveterinaria@gmail.com',             // Email profesional\n  whatsappPhone: '+56 9 7604 0797',              // WhatsApp\n  \n  // CLÍNICA/CONSULTA\n  clinicName: 'Atención Veterinaria a Domicilio', // Nombre del servicio\n  address: 'Santiago, Chile',                     // Ubicación general\n  serviceArea: 'Región Metropolitana',            // Área de cobertura\n  \n  // INFORMACIÓN PARA CERTIFICADOS\n  signature: 'Dra. Alejandra Cautín Bastías',    // Nombre para firmas\n  professionalId: 'Médica Veterinaria Colegiada', // ID profesional\n  \n  // CONFIGURACIÓN ADICIONAL\n  workingHours: 'Lunes a Viernes 9:00-18:00',   // Horario de atención\n  emergencyPhone: '+56 9 7604 0797',             // Teléfono de emergencias\n  website: 'AleVeterinaria.cl',                  // Sitio web\n  \n  // REDES SOCIALES\n  instagram: '@AleVeterinaria',                   // Instagram\n  facebook: 'Ale Veterinaria Santiago',          // Facebook\n  whatsapp: '+56976040797',                       // WhatsApp Business\n  \n  // INFORMACIÓN PROFESIONAL ESPECÍFICA\n  mission: 'Cuidar con calidez y respeto lo que más amas',\n  approach: 'Enfoque preventivo e integrativo, reduciendo ansiedad y miedo',\n  certification: 'Certificada en técnicas de reducción de ansiedad veterinaria',\n  philosophy: 'Acompaño desde el cuidado consciente, respetando la conexión entre tutor y animal'\n};\n\n// EJEMPLO DE CÓMO PERSONALIZAR:\n// \n// export const veterinarianConfig = {\n//   name: 'Dr. Juan Pérez Veterinario',\n//   title: 'Médico Veterinario',\n//   speciality: 'Cardiología y Medicina Felina',\n//   license: 'MV 67890',\n//   phone: '+56 9 8765 4321',\n//   email: 'juan.perez@miveterinaria.cl',\n//   clinicName: 'Clínica Veterinaria San Bernardo',\n//   address: 'San Bernardo, Santiago',\n//   signature: 'Dr. Juan Pérez V.',\n//   professionalId: 'RUT: 16.789.123-4',\n//   workingHours: '08:30 - 19:30',\n//   emergencyPhone: '+56 9 1234 5678',\n//   website: 'www.miveterinaria.cl',\n//   instagram: '@clinica_veterinaria_sb',\n//   facebook: 'Clínica Veterinaria San Bernardo',\n//   whatsapp: '+56987654321'\n// };","size_bytes":2744},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { User } from 'firebase/auth';\nimport { onAuthStateChange, signOutUser } from '@/lib/firebase';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange((user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signOut = async () => {\n    await signOutUser();\n  };\n\n  const value = {\n    user,\n    loading,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":1118},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc, collection, query, where, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"default_api_key\",\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"vetcare-chile\"}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"vetcare-chile\",\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"vetcare-chile\"}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"default_app_id\",\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n\n// Auth functions\nexport const signInUser = async (email: string, password: string) => {\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const createUser = async (email: string, password: string) => {\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => {\n  return await signOut(auth);\n};\n\nexport const onAuthStateChange = (callback: (user: any) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// Firestore functions\nexport const createDocument = async (collectionName: string, data: any, docId?: string) => {\n  if (docId) {\n    await setDoc(doc(db, collectionName, docId), data, { merge: true });\n    return docId;\n  } else {\n    const docRef = await addDoc(collection(db, collectionName), data);\n    return docRef.id;\n  }\n};\n\nexport const getDocument = async (collectionName: string, docId: string) => {\n  const docRef = doc(db, collectionName, docId);\n  const docSnap = await getDoc(docRef);\n  return docSnap.exists() ? { id: docSnap.id, ...docSnap.data() } : null;\n};\n\nexport const getDocuments = async (collectionName: string, whereField?: string, whereOperator?: any, whereValue?: any) => {\n  let q;\n  if (whereField && whereOperator && whereValue) {\n    q = query(collection(db, collectionName), where(whereField, whereOperator, whereValue));\n  } else {\n    q = query(collection(db, collectionName));\n  }\n  \n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const updateDocument = async (collectionName: string, docId: string, data: any) => {\n  const docRef = doc(db, collectionName, docId);\n  await updateDoc(docRef, data);\n};\n\nexport const deleteDocument = async (collectionName: string, docId: string) => {\n  const docRef = doc(db, collectionName, docId);\n  await deleteDoc(docRef);\n};\n\n// Storage functions\nexport const uploadFile = async (file: File, path: string) => {\n  const storageRef = ref(storage, path);\n  const snapshot = await uploadBytes(storageRef, file);\n  return await getDownloadURL(snapshot.ref);\n};\n\nexport const deleteFile = async (path: string) => {\n  const storageRef = ref(storage, path);\n  await deleteObject(storageRef);\n};\n","size_bytes":3242},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/rutValidator.ts":{"content":"export interface RutValidationResult {\n  isValid: boolean;\n  formatted: string;\n  error?: string;\n}\n\nexport const formatRut = (rut: string): string => {\n  // Remove all non-numeric characters except 'k' or 'K'\n  const cleanRut = rut.replace(/[^0-9kK]/g, '');\n  \n  if (cleanRut.length < 2) return cleanRut;\n  \n  // Separate body and check digit\n  const body = cleanRut.slice(0, -1);\n  const checkDigit = cleanRut.slice(-1).toUpperCase();\n  \n  // Format body with dots\n  const formattedBody = body.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  \n  return `${formattedBody}-${checkDigit}`;\n};\n\nexport const validateRut = (rut: string): RutValidationResult => {\n  try {\n    // Clean the RUT\n    const cleanRut = rut.replace(/[^0-9kK]/g, '');\n    \n    if (cleanRut.length < 2) {\n      return {\n        isValid: false,\n        formatted: rut,\n        error: 'RUT debe tener al menos 2 caracteres'\n      };\n    }\n    \n    // Separate body and check digit\n    const body = cleanRut.slice(0, -1);\n    const checkDigit = cleanRut.slice(-1).toUpperCase();\n    \n    // Validate body is numeric\n    if (!/^\\d+$/.test(body)) {\n      return {\n        isValid: false,\n        formatted: formatRut(rut),\n        error: 'El cuerpo del RUT debe ser numérico'\n      };\n    }\n    \n    // Validate length\n    if (body.length < 7 || body.length > 8) {\n      return {\n        isValid: false,\n        formatted: formatRut(rut),\n        error: 'RUT debe tener entre 7 y 8 dígitos más el dígito verificador'\n      };\n    }\n    \n    // Calculate check digit using module 11 algorithm\n    const calculatedCheckDigit = calculateCheckDigit(body);\n    \n    if (checkDigit !== calculatedCheckDigit) {\n      return {\n        isValid: false,\n        formatted: formatRut(rut),\n        error: 'Dígito verificador inválido'\n      };\n    }\n    \n    return {\n      isValid: true,\n      formatted: formatRut(rut)\n    };\n    \n  } catch (error) {\n    return {\n      isValid: false,\n      formatted: rut,\n      error: 'Error al validar RUT'\n    };\n  }\n};\n\nconst calculateCheckDigit = (body: string): string => {\n  let sum = 0;\n  let multiplier = 2;\n  \n  // Calculate sum from right to left\n  for (let i = body.length - 1; i >= 0; i--) {\n    sum += parseInt(body[i]) * multiplier;\n    multiplier = multiplier === 7 ? 2 : multiplier + 1;\n  }\n  \n  const remainder = sum % 11;\n  const checkDigit = 11 - remainder;\n  \n  if (checkDigit === 11) return '0';\n  if (checkDigit === 10) return 'K';\n  return checkDigit.toString();\n};\n\nexport const isValidRut = (rut: string): boolean => {\n  return validateRut(rut).isValid;\n};\n\nexport const extractRutBody = (rut: string): string => {\n  const cleanRut = rut.replace(/[^0-9kK]/g, '');\n  return cleanRut.slice(0, -1);\n};\n\nexport const extractCheckDigit = (rut: string): string => {\n  const cleanRut = rut.replace(/[^0-9kK]/g, '');\n  return cleanRut.slice(-1).toUpperCase();\n};\n","size_bytes":2870},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/vaccines.ts":{"content":"export interface Vaccine {\n  id: string;\n  name: string;\n  laboratory: string;\n  type: string;\n  pathogens: string[];\n  species: string[];\n}\n\nexport const chileanVaccines: Vaccine[] = [\n  // Zoetis Vaccines\n  {\n    id: \"zoetis-vanguard-plus5\",\n    name: \"Vanguard Plus 5\",\n    laboratory: \"Zoetis\",\n    type: \"Polivalente\",\n    pathogens: [\"Distemper\", \"Adenovirus tipo 1\", \"Adenovirus tipo 2\", \"Parainfluenza\", \"Parvovirus\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"zoetis-vanguard-plus5-l4\",\n    name: \"Vanguard Plus 5 L4\",\n    laboratory: \"Zoetis\",\n    type: \"Polivalente + Leptospira\",\n    pathogens: [\"Distemper\", \"Adenovirus tipo 1\", \"Adenovirus tipo 2\", \"Parainfluenza\", \"Parvovirus\", \"Leptospira canicola\", \"Leptospira grippotyphosa\", \"Leptospira icterohaemorrhagiae\", \"Leptospira pomona\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"zoetis-vanguard-htlp5\",\n    name: \"Vanguard HTLP 5\",\n    laboratory: \"Zoetis\",\n    type: \"Polivalente + Leptospira\",\n    pathogens: [\"Distemper\", \"Adenovirus\", \"Leptospira\", \"Parainfluenza\", \"Parvovirus\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"zoetis-fel-o-vax-iv\",\n    name: \"Fel-O-Vax IV\",\n    laboratory: \"Zoetis\",\n    type: \"Polivalente felina\",\n    pathogens: [\"Rinotraqueitis viral felina\", \"Calicivirus felino\", \"Panleucopenia felina\", \"Leucemia felina\"],\n    species: [\"Felino\"]\n  },\n  {\n    id: \"zoetis-fel-o-vax-pch\",\n    name: \"Fel-O-Vax PCH\",\n    laboratory: \"Zoetis\",\n    type: \"Triple felina\",\n    pathogens: [\"Rinotraqueitis viral felina\", \"Calicivirus felino\", \"Panleucopenia felina\"],\n    species: [\"Felino\"]\n  },\n  \n  // MSD/Nobivac Vaccines\n  {\n    id: \"nobivac-dhppi\",\n    name: \"Nobivac DHPPi\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Polivalente\",\n    pathogens: [\"Distemper\", \"Hepatitis\", \"Parvovirus\", \"Parainfluenza\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"nobivac-dh2pp\",\n    name: \"Nobivac DH2PP\",\n    laboratory: \"MSD/Nobivac\", \n    type: \"Polivalente\",\n    pathogens: [\"Distemper\", \"Adenovirus tipo 2\", \"Parvovirus\", \"Parainfluenza\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"nobivac-lepto-4\",\n    name: \"Nobivac Lepto 4\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Leptospirosis\",\n    pathogens: [\"Leptospira canicola\", \"Leptospira grippotyphosa\", \"Leptospira icterohaemorrhagiae\", \"Leptospira pomona\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"nobivac-rabies\",\n    name: \"Nobivac Rabia\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Antirrábica\",\n    pathogens: [\"Virus de la rabia\"],\n    species: [\"Canino\", \"Felino\"]\n  },\n  {\n    id: \"nobivac-tricat-trio\",\n    name: \"Nobivac Tricat Trio\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Triple felina\",\n    pathogens: [\"Rinotraqueitis viral felina\", \"Calicivirus felino\", \"Panleucopenia felina\"],\n    species: [\"Felino\"]\n  },\n  \n  // Additional Chilean market vaccines\n  {\n    id: \"merial-eurican-dhppi2-l\",\n    name: \"Eurican DHPPi2-L\",\n    laboratory: \"Merial\",\n    type: \"Polivalente + Leptospira\",\n    pathogens: [\"Distemper\", \"Hepatitis\", \"Parvovirus\", \"Parainfluenza\", \"Adenovirus tipo 2\", \"Leptospira\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"virbac-canigen-dha2ppil\",\n    name: \"Canigen DHA2PPiL\",\n    laboratory: \"Virbac\",\n    type: \"Polivalente + Leptospira\",\n    pathogens: [\"Distemper\", \"Hepatitis\", \"Adenovirus tipo 2\", \"Parvovirus\", \"Parainfluenza\", \"Leptospira\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"nobivac-felv\",\n    name: \"Nobivac FeLV\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Leucemia felina\",\n    pathogens: [\"Leucemia felina\"],\n    species: [\"Felino\"]\n  },\n  {\n    id: \"nobivac-puppy-dp\",\n    name: \"Nobivac Puppy DP\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Cachorro\",\n    pathogens: [\"Distemper\", \"Parvovirus\"],\n    species: [\"Canino\"]\n  },\n  {\n    id: \"nobivac-kc\",\n    name: \"Nobivac KC\",\n    laboratory: \"MSD/Nobivac\",\n    type: \"Tos de las perreras\",\n    pathogens: [\"Bordetella bronchiseptica\", \"Parainfluenza\"],\n    species: [\"Canino\"]\n  }\n];\n\nexport const getVaccineById = (id: string): Vaccine | undefined => {\n  return chileanVaccines.find(vaccine => vaccine.id === id);\n};\n\nexport const getVaccinesBySpecies = (species: string): Vaccine[] => {\n  return chileanVaccines.filter(vaccine => \n    vaccine.species.includes(species)\n  );\n};\n\nexport const getLaboratories = (): string[] => {\n  const labs = new Set(chileanVaccines.map(vaccine => vaccine.laboratory));\n  return Array.from(labs).sort();\n};\n\nexport const getVaccineTypes = (): string[] => {\n  const types = new Set(chileanVaccines.map(vaccine => vaccine.type));\n  return Array.from(types).sort();\n};","size_bytes":4532},"client/src/lib/whatsapp.ts":{"content":"interface WhatsAppMessage {\n  to: string;\n  message: string;\n}\n\ninterface ExamNotificationData {\n  clientName: string;\n  petName: string;\n  examType: string;\n  examDate: string;\n  instructions: string;\n  veterinarianName: string;\n  clinicPhone: string;\n}\n\ninterface AppointmentNotificationData {\n  clientName: string;\n  petName: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  service: string;\n  address: string;\n  veterinarianName: string;\n  clinicPhone: string;\n}\n\nexport class WhatsAppService {\n  private static formatPhoneNumber(phone: string): string {\n    // Remove all non-numeric characters and ensure Chilean format\n    const cleaned = phone.replace(/\\D/g, '');\n    \n    // If it starts with 56 (Chile code), keep it\n    if (cleaned.startsWith('56')) {\n      return cleaned;\n    }\n    \n    // If it starts with 9 (mobile), add Chile code\n    if (cleaned.startsWith('9')) {\n      return `56${cleaned}`;\n    }\n    \n    // Otherwise, assume it needs Chile code\n    return `56${cleaned}`;\n  }\n\n  static generateWhatsAppURL({ to, message }: WhatsAppMessage): string {\n    const formattedPhone = this.formatPhoneNumber(to);\n    const encodedMessage = encodeURIComponent(message);\n    return `https://wa.me/${formattedPhone}?text=${encodedMessage}`;\n  }\n\n  static sendExamReminder(data: ExamNotificationData): string {\n    const message = `🏥 *RECORDATORIO DE EXAMEN VETERINARIO*\n\nHola ${data.clientName}! 👋\n\nTe recordamos que ${data.petName} tiene programado:\n📋 *${data.examType}*\n📅 *Fecha:* ${data.examDate}\n\n📝 *INSTRUCCIONES IMPORTANTES:*\n${data.instructions}\n\n👩‍⚕️ *Veterinaria:* ${data.veterinarianName}\n📞 *Consultas:* ${data.clinicPhone}\n\nPor favor confirma tu asistencia respondiendo este mensaje.\n\n_VetCare Chile - Cuidado veterinario a domicilio_ 🐾`;\n\n    return message;\n  }\n\n  static sendAppointmentConfirmation(data: AppointmentNotificationData): string {\n    const message = `✅ *CITA CONFIRMADA - VETCARE CHILE*\n\nHola ${data.clientName}! \n\nTu cita veterinaria ha sido confirmada:\n\n🐾 *Paciente:* ${data.petName}\n🏥 *Servicio:* ${data.service}\n📅 *Fecha:* ${data.appointmentDate}\n🕐 *Hora:* ${data.appointmentTime}\n📍 *Dirección:* ${data.address}\n\n👩‍⚕️ *Veterinaria:* ${data.veterinarianName}\n📞 *Contacto:* ${data.clinicPhone}\n\n*IMPORTANTE:*\n- La veterinaria llegará 15 min antes de la hora\n- Ten listo el carnet de vacunas de tu mascota\n- Prepara un espacio cómodo y bien iluminado\n\n¿Necesitas cambiar la hora? Responde este mensaje.\n\n_VetCare Chile - Tu veterinaria de confianza a domicilio_ 🏠🐾`;\n\n    return message;\n  }\n\n  static sendExamResultsReady(clientName: string, petName: string, examType: string, veterinarianName: string, phone: string): string {\n    const message = `📋 *RESULTADOS LISTOS - VETCARE CHILE*\n\nHola ${clientName}! \n\nLos resultados del examen de ${petName} ya están disponibles:\n\n🔬 *Examen:* ${examType}\n🐾 *Paciente:* ${petName}\n👩‍⚕️ *Veterinaria:* ${veterinarianName}\n\nLos resultados han sido enviados a tu correo electrónico y están disponibles en el portal de clientes.\n\n📞 *Consultas:* ${phone}\n\n_VetCare Chile - Resultados profesionales para el cuidado de tu mascota_ 🩺`;\n\n    return message;\n  }\n\n  static sendVaccinationReminder(clientName: string, petName: string, vaccineType: string, dueDate: string, veterinarianName: string, phone: string): string {\n    const message = `💉 *RECORDATORIO DE VACUNACIÓN*\n\nHola ${clientName}! \n\nEs hora de vacunar a ${petName}:\n\n🐾 *Mascota:* ${petName}\n💉 *Vacuna:* ${vaccineType}\n📅 *Fecha recomendada:* ${dueDate}\n👩‍⚕️ *Veterinaria:* ${veterinarianName}\n\nPara agendar la vacunación a domicilio, responde este mensaje o llama al ${phone}.\n\n*Beneficios del servicio a domicilio:*\n- Sin estrés para tu mascota\n- Comodidad de tu hogar\n- Atención personalizada\n\n_VetCare Chile - Vacunación segura en la comodidad de tu hogar_ 🏠💉`;\n\n    return message;\n  }\n\n  static sendEmergencyContact(clientName: string, petName: string, issue: string, veterinarianName: string, phone: string): string {\n    const message = `🚨 *CONTACTO DE EMERGENCIA - VETCARE*\n\n${clientName}, hemos recibido tu consulta de emergencia.\n\n🐾 *Paciente:* ${petName}\n⚠️ *Motivo:* ${issue}\n👩‍⚕️ *Veterinaria de guardia:* ${veterinarianName}\n\n📞 *LLAMA INMEDIATAMENTE:* ${phone}\n\nMientras tanto:\n- Mantén a tu mascota calmada\n- No le des comida ni agua\n- Observa síntomas y anótalos\n\nLa veterinaria te contactará en los próximos 15 minutos.\n\n_VetCare Chile - Emergencias veterinarias 24/7_ 🏥`;\n\n    return message;\n  }\n\n  // Method to open WhatsApp with pre-filled message\n  static openWhatsApp(phoneNumber: string, message: string): void {\n    const url = this.generateWhatsAppURL({ to: phoneNumber, message });\n    window.open(url, '_blank');\n  }\n}\n\nexport default WhatsAppService;","size_bytes":4889},"client/src/pages/HomePage.tsx":{"content":"import { useState } from 'react';\nimport Navigation from '@/components/Navigation';\nimport Hero from '@/components/Hero';\nimport Services from '@/components/Services';\nimport About from '@/components/About';\nimport Booking from '@/components/Booking';\nimport FAQ from '@/components/FAQ';\nimport Resources from '@/components/Resources';\nimport Contact from '@/components/Contact';\nimport LoginModal from '@/components/LoginModal';\n\nconst HomePage = () => {\n  const [loginModalOpen, setLoginModalOpen] = useState(false);\n  const [loginType, setLoginType] = useState<'tutor' | 'profesional'>('tutor');\n\n  const showLoginModal = (type: 'tutor' | 'profesional') => {\n    setLoginType(type);\n    setLoginModalOpen(true);\n  };\n  const coverageAreas = [\n    { name: \"Las Condes\", color: \"text-mint\" },\n    { name: \"Vitacura\", color: \"text-lavender\" },\n    { name: \"Providencia\", color: \"text-turquoise\" },\n    { name: \"Ñuñoa\", color: \"text-palerose\" },\n    { name: \"Santiago Centro\", color: \"text-mint\" },\n    { name: \"La Reina\", color: \"text-lavender\" },\n    { name: \"Macul\", color: \"text-turquoise\" },\n    { name: \"Peñalolén\", color: \"text-palerose\" }\n  ];\n\n  return (\n    <div className=\"bg-warmbeige font-lato\">\n      <Navigation />\n      <Hero />\n      <Services />\n      \n      {/* Coverage Areas Section */}\n      <section className=\"py-20 bg-gradient-to-r from-warmbeige to-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-poppins font-bold text-darkgray mb-4\">Zonas de Cobertura</h2>\n            <p className=\"text-xl text-gray-600\">Atendemos en las siguientes comunas de Santiago</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {coverageAreas.map((area, index) => (\n              <div key={index} className=\"bg-white p-6 rounded-xl shadow-lg text-center\">\n                <i className={`fas fa-map-marker-alt ${area.color} text-3xl mb-4`}></i>\n                <h3 className=\"font-poppins font-semibold text-darkgray text-lg\">{area.name}</h3>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <About />\n      \n      {/* Demo Access Section */}\n      <section className=\"py-16 bg-gradient-to-r from-mint to-turquoise\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-poppins font-bold text-white mb-6\">Acceso a Portales - Demostración</h2>\n          <p className=\"text-xl text-white font-lato mb-8\">\n            Explora las funcionalidades completas de nuestros portales usando las credenciales de demostración\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-white p-8 rounded-3xl shadow-2xl\">\n              <i className=\"fas fa-user-md text-4xl text-mint mb-4\"></i>\n              <h3 className=\"text-2xl font-poppins font-semibold text-darkgray mb-4\">Portal Profesional</h3>\n              <p className=\"text-gray-600 font-lato mb-4\">\n                Gestión completa de fichas clínicas, vacunación, certificados y más\n              </p>\n              <div className=\"bg-mint/10 p-4 rounded-lg mb-4\">\n                <p className=\"text-sm font-mono text-darkgray\">\n                  <strong>Email:</strong> demo@veterinario.com<br/>\n                  <strong>Contraseña:</strong> cualquier texto\n                </p>\n              </div>\n              <button \n                onClick={() => showLoginModal('profesional')}\n                className=\"bg-mint text-darkgray px-6 py-3 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all w-full\"\n              >\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                Acceder al Portal\n              </button>\n            </div>\n            \n            <div className=\"bg-white p-8 rounded-3xl shadow-2xl\">\n              <i className=\"fas fa-heart text-4xl text-lavender mb-4\"></i>\n              <h3 className=\"text-2xl font-poppins font-semibold text-darkgray mb-4\">Portal del Tutor</h3>\n              <p className=\"text-gray-600 font-lato mb-4\">\n                Historial médico completo de tus mascotas y descarga de documentos\n              </p>\n              <div className=\"bg-lavender/10 p-4 rounded-lg mb-4\">\n                <p className=\"text-sm font-mono text-darkgray\">\n                  <strong>Email:</strong> demo@tutor.com<br/>\n                  <strong>Contraseña:</strong> cualquier texto\n                </p>\n              </div>\n              <button \n                onClick={() => showLoginModal('tutor')}\n                className=\"bg-lavender text-darkgray px-6 py-3 rounded-xl font-poppins font-semibold hover:shadow-lg transition-all w-full\"\n              >\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                Acceder al Portal\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Booking />\n      <FAQ />\n      <Resources />\n      <Contact />\n\n      {/* Footer */}\n      <footer className=\"bg-darkgray text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <i className=\"fas fa-heart text-palerose text-2xl\"></i>\n                <h3 className=\"text-xl font-poppins font-bold\">VetCare Chile</h3>\n              </div>\n              <p className=\"text-gray-300 font-lato leading-relaxed\">\n                Atención veterinaria profesional a domicilio. Cuidamos a tu mascota con amor y dedicación en Santiago, Chile.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-poppins font-semibold mb-4\">Enlaces Rápidos</h4>\n              <ul className=\"space-y-2 text-gray-300 font-lato\">\n                <li><button onClick={() => document.getElementById('servicios')?.scrollIntoView({ behavior: 'smooth' })} className=\"hover:text-mint transition-colors\">Servicios</button></li>\n                <li><button onClick={() => document.getElementById('agendar')?.scrollIntoView({ behavior: 'smooth' })} className=\"hover:text-lavender transition-colors\">Agendar Cita</button></li>\n                <li><button onClick={() => document.getElementById('faq')?.scrollIntoView({ behavior: 'smooth' })} className=\"hover:text-turquoise transition-colors\">FAQ</button></li>\n                <li><button onClick={() => document.getElementById('contacto')?.scrollIntoView({ behavior: 'smooth' })} className=\"hover:text-palerose transition-colors\">Contacto</button></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-poppins font-semibold mb-4\">Contacto</h4>\n              <ul className=\"space-y-2 text-gray-300 font-lato\">\n                <li><i className=\"fas fa-phone mr-2\"></i>+56 9 1234 5678</li>\n                <li><i className=\"fas fa-envelope mr-2\"></i>info@vetcarechile.com</li>\n                <li><i className=\"fas fa-map-marker-alt mr-2\"></i>Santiago, Chile</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-400 font-lato\">\n            <p>&copy; 2023 VetCare Chile. Todos los derechos reservados.</p>\n          </div>\n        </div>\n      </footer>\n\n      <LoginModal \n        isOpen={loginModalOpen}\n        onClose={() => setLoginModalOpen(false)}\n        type={loginType}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n","size_bytes":7646},"client/src/pages/OwnerPortal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { VaccineCalculator } from '@/lib/vaccineCalculator';\n\nconst OwnerPortal = () => {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [activeTab, setActiveTab] = useState('pets');\n\n  // Mock data - en producción vendría de Firebase\n  const [pets] = useState([\n    {\n      id: '1',\n      name: 'Max',\n      species: 'Perro',\n      breed: 'Yorkshire Terrier',\n      sex: 'Macho',\n      color: 'Marrón y negro',\n      birthDate: '2020-05-15',\n      microchipId: '9840000123456789',\n      weight: '3.5 kg'\n    }\n  ]);\n\n  const [vaccinations, setVaccinations] = useState([\n    {\n      id: '1',\n      petId: '1',\n      vaccine: 'Quíntuple (Distemper, Hepatitis, Parvovirus, Parainfluenza, Leptospirosis)',\n      date: '2023-12-15',\n      nextDue: '2024-12-15',\n      veterinarian: 'Dra. Alejandra Cautín Bastías',\n      batchNumber: 'VAG123ABC',\n      laboratory: 'Zoetis',\n      validityDays: 365\n    },\n    {\n      id: '2',\n      petId: '1',\n      vaccine: 'Antirrábica',\n      date: '2023-11-20',\n      nextDue: '2024-11-20',\n      veterinarian: 'Dra. Alejandra Cautín Bastías',\n      batchNumber: 'RAB456DEF',\n      laboratory: 'Zoetis',\n      validityDays: 365\n    }\n  ]);\n\n  const [dewormings, setDewormings] = useState([\n    {\n      id: '1',\n      petId: '1',\n      type: 'internal',\n      product: 'Drontal Plus',\n      activeIngredient: 'Praziquantel + Pirantel + Febantel',\n      date: '2023-12-01',\n      nextDue: '2024-03-01',\n      veterinarian: 'Dra. Alejandra Cautín Bastías',\n      laboratory: 'Bayer',\n      batchNumber: 'DP789XYZ'\n    },\n    {\n      id: '2',\n      petId: '1',\n      type: 'external',\n      product: 'Frontline Plus',\n      activeIngredient: 'Fipronil + S-Metopreno',\n      date: '2023-12-01',\n      nextDue: '2024-01-01',\n      veterinarian: 'Dra. Alejandra Cautín Bastías',\n      laboratory: 'Boehringer Ingelheim',\n      batchNumber: 'FP456ABC'\n    }\n  ]);\n\n  const [newDeworming, setNewDeworming] = useState({\n    petId: '1',\n    type: 'internal',\n    product: '',\n    activeIngredient: '',\n    date: new Date().toISOString().split('T')[0],\n    laboratory: '',\n    batchNumber: '',\n    notes: ''\n  });\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/');\n    }\n  }, [user, loading, setLocation]);\n\n  const addDeworming = () => {\n    if (!newDeworming.product || !newDeworming.date) {\n      toast({\n        title: \"Error\",\n        description: \"Completa todos los campos requeridos\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Calcular próxima fecha según tipo\n    const nextDueDate = new Date(newDeworming.date);\n    if (newDeworming.type === 'internal') {\n      nextDueDate.setMonth(nextDueDate.getMonth() + 3); // Cada 3 meses\n    } else {\n      nextDueDate.setMonth(nextDueDate.getMonth() + 1); // Cada mes\n    }\n\n    const newDewormingRecord = {\n      id: Date.now().toString(),\n      ...newDeworming,\n      nextDue: nextDueDate.toISOString().split('T')[0],\n      veterinarian: 'Tutor (Aplicación domiciliaria)'\n    };\n\n    setDewormings([...dewormings, newDewormingRecord]);\n    \n    // Reset form\n    setNewDeworming({\n      petId: '1',\n      type: 'internal',\n      product: '',\n      activeIngredient: '',\n      date: new Date().toISOString().split('T')[0],\n      laboratory: '',\n      batchNumber: '',\n      notes: ''\n    });\n\n    toast({\n      title: \"Desparasitación registrada\",\n      description: \"El registro se ha agregado exitosamente y aparecerá en la ficha clínica\"\n    });\n  };\n\n  const printVaccineCard = () => {\n    const printContent = generateVaccineCardHTML();\n    const printWindow = window.open('', '_blank', 'width=800,height=600');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.onload = () => {\n        setTimeout(() => {\n          printWindow.print();\n        }, 1000);\n      };\n    }\n  };\n\n  const generateVaccineCardHTML = () => {\n    const pet = pets[0]; // Para demo, tomar la primera mascota\n    const petVaccinations = vaccinations.filter(v => v.petId === pet.id);\n    const petDewormings = dewormings.filter(d => d.petId === pet.id);\n\n    return `\n    <!DOCTYPE html>\n    <html lang=\"es\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Carnet de Vacunas - ${pet.name}</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n                margin: 20px;\n                line-height: 1.4;\n                color: #333;\n            }\n            .header {\n                text-align: center;\n                border-bottom: 3px solid #4ECDC4;\n                padding-bottom: 20px;\n                margin-bottom: 30px;\n            }\n            .pet-info {\n                background: #f8f9fa;\n                padding: 20px;\n                border-radius: 10px;\n                margin-bottom: 30px;\n            }\n            .pet-info h3 {\n                margin-top: 0;\n                color: #2C3E50;\n            }\n            .info-grid {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                gap: 15px;\n            }\n            .info-item {\n                display: flex;\n                justify-content: space-between;\n                padding: 5px 0;\n                border-bottom: 1px dotted #ccc;\n            }\n            .section {\n                margin-bottom: 40px;\n            }\n            .section h3 {\n                background: #4ECDC4;\n                color: white;\n                padding: 10px 15px;\n                margin: 0 0 20px 0;\n                border-radius: 5px;\n            }\n            .table {\n                width: 100%;\n                border-collapse: collapse;\n                margin-bottom: 20px;\n            }\n            .table th, .table td {\n                border: 1px solid #ddd;\n                padding: 10px;\n                text-align: left;\n                font-size: 12px;\n            }\n            .table th {\n                background: #f1f1f1;\n                font-weight: bold;\n            }\n            .status-overdue {\n                color: #e74c3c;\n                font-weight: bold;\n            }\n            .status-due-soon {\n                color: #f39c12;\n                font-weight: bold;\n            }\n            .status-current {\n                color: #27ae60;\n                font-weight: bold;\n            }\n            .footer {\n                margin-top: 50px;\n                text-align: center;\n                font-size: 10px;\n                color: #666;\n                border-top: 1px solid #ddd;\n                padding-top: 20px;\n            }\n            .vet-signature {\n                margin-top: 40px;\n                text-align: right;\n            }\n            .signature-line {\n                border-top: 1px solid #000;\n                width: 300px;\n                margin: 40px 0 10px auto;\n                text-align: center;\n                padding-top: 5px;\n                font-size: 12px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>🐾 CARNET DE VACUNAS Y DESPARASITACIÓN 🐾</h1>\n            <h2>VetCare Chile - Servicios Veterinarios a Domicilio</h2>\n        </div>\n\n        <div class=\"pet-info\">\n            <h3>Información de la Mascota</h3>\n            <div class=\"info-grid\">\n                <div class=\"info-item\">\n                    <strong>Nombre:</strong>\n                    <span>${pet.name}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Especie:</strong>\n                    <span>${pet.species}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Raza:</strong>\n                    <span>${pet.breed}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Sexo:</strong>\n                    <span>${pet.sex}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Color:</strong>\n                    <span>${pet.color}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Fecha de Nacimiento:</strong>\n                    <span>${new Date(pet.birthDate).toLocaleDateString('es-CL')}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Microchip:</strong>\n                    <span>${pet.microchipId || 'No registrado'}</span>\n                </div>\n                <div class=\"info-item\">\n                    <strong>Peso:</strong>\n                    <span>${pet.weight}</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"section\">\n            <h3>📋 Historial de Vacunación</h3>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th>Fecha</th>\n                        <th>Vacuna</th>\n                        <th>Laboratorio</th>\n                        <th>Lote</th>\n                        <th>Próxima Dosis</th>\n                        <th>Estado</th>\n                        <th>Veterinario</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${petVaccinations.map(vaccination => {\n                      const result = VaccineCalculator.calculateNextVaccination({\n                        vaccinationDate: vaccination.date,\n                        customDuration: vaccination.validityDays\n                      });\n                      const statusClass = result.alertLevel === 'red' ? 'status-overdue' : \n                                        result.alertLevel === 'yellow' ? 'status-due-soon' : 'status-current';\n                      const statusText = result.isOverdue ? 'VENCIDA' : \n                                       result.daysUntilDue <= 30 ? 'PRÓXIMA' : 'VIGENTE';\n                      \n                      return `\n                      <tr>\n                          <td>${new Date(vaccination.date).toLocaleDateString('es-CL')}</td>\n                          <td>${vaccination.vaccine}</td>\n                          <td>${vaccination.laboratory}</td>\n                          <td>${vaccination.batchNumber}</td>\n                          <td>${new Date(vaccination.nextDue).toLocaleDateString('es-CL')}</td>\n                          <td class=\"${statusClass}\">${statusText}</td>\n                          <td>${vaccination.veterinarian}</td>\n                      </tr>`;\n                    }).join('')}\n                </tbody>\n            </table>\n        </div>\n\n        <div class=\"section\">\n            <h3>🐛 Historial de Desparasitación</h3>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th>Fecha</th>\n                        <th>Tipo</th>\n                        <th>Producto</th>\n                        <th>Principio Activo</th>\n                        <th>Laboratorio</th>\n                        <th>Lote</th>\n                        <th>Próxima Dosis</th>\n                        <th>Aplicado por</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${petDewormings.map(deworming => `\n                    <tr>\n                        <td>${new Date(deworming.date).toLocaleDateString('es-CL')}</td>\n                        <td>${deworming.type === 'internal' ? 'Interna' : 'Externa'}</td>\n                        <td>${deworming.product}</td>\n                        <td>${deworming.activeIngredient}</td>\n                        <td>${deworming.laboratory}</td>\n                        <td>${deworming.batchNumber}</td>\n                        <td>${new Date(deworming.nextDue).toLocaleDateString('es-CL')}</td>\n                        <td>${deworming.veterinarian}</td>\n                    </tr>\n                    `).join('')}\n                </tbody>\n            </table>\n        </div>\n\n        <div class=\"vet-signature\">\n            <div class=\"signature-line\">\n                Firma y Timbre Veterinario\n            </div>\n        </div>\n\n        <div class=\"footer\">\n            <p><strong>VetCare Chile</strong> - Servicios Veterinarios a Domicilio</p>\n            <p>📞 +56 9 1234 5678 | 📧 info@vetcarechile.com</p>\n            <p>Documento generado el ${new Date().toLocaleDateString('es-CL')} a las ${new Date().toLocaleTimeString('es-CL')}</p>\n        </div>\n    </body>\n    </html>`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-warmbeige flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-mint mb-4\"></i>\n          <p className=\"text-darkgray font-poppins\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warmbeige pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-poppins font-bold text-darkgray mb-2\">Portal del Tutor</h1>\n              <p className=\"text-gray-600 font-lato\">Gestiona la información de tus mascotas</p>\n            </div>\n            <Button onClick={() => setLocation('/')} variant=\"outline\">\n              <i className=\"fas fa-home mr-2\"></i>\n              Volver al Inicio\n            </Button>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex space-x-4 mb-6\">\n            <Button\n              onClick={() => setActiveTab('pets')}\n              className={`${activeTab === 'pets' ? 'bg-mint text-darkgray' : 'bg-white text-gray-600 hover:bg-mint/20'}`}\n            >\n              <i className=\"fas fa-paw mr-2\"></i>\n              Mis Mascotas\n            </Button>\n            <Button\n              onClick={() => setActiveTab('vaccines')}\n              className={`${activeTab === 'vaccines' ? 'bg-mint text-darkgray' : 'bg-white text-gray-600 hover:bg-mint/20'}`}\n            >\n              <i className=\"fas fa-syringe mr-2\"></i>\n              Carnet de Vacunas\n            </Button>\n            <Button\n              onClick={() => setActiveTab('deworming')}\n              className={`${activeTab === 'deworming' ? 'bg-mint text-darkgray' : 'bg-white text-gray-600 hover:bg-mint/20'}`}\n            >\n              <i className=\"fas fa-bug mr-2\"></i>\n              Desparasitación\n            </Button>\n          </div>\n        </div>\n\n        {/* Pets Tab */}\n        {activeTab === 'pets' && (\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {pets.map((pet) => (\n              <Card key={pet.id}>\n                <CardHeader>\n                  <CardTitle className=\"font-poppins flex items-center\">\n                    <i className=\"fas fa-paw text-mint mr-2\"></i>\n                    {pet.name}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">Especie:</span>\n                      <span>{pet.species}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">Raza:</span>\n                      <span>{pet.breed}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">Sexo:</span>\n                      <span>{pet.sex}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">Peso:</span>\n                      <span>{pet.weight}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">Microchip:</span>\n                      <span className=\"text-sm\">{pet.microchipId}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Vaccines Tab */}\n        {activeTab === 'vaccines' && (\n          <div>\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-poppins font-bold text-darkgray\">Carnet de Vacunas</h2>\n              <Button onClick={printVaccineCard} className=\"bg-turquoise text-darkgray hover:bg-turquoise/80\">\n                <i className=\"fas fa-print mr-2\"></i>\n                Imprimir Carnet\n              </Button>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-poppins\">Historial de Vacunación - {pets[0]?.name}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-gray-50\">\n                        <th className=\"border border-gray-300 p-3 text-left\">Fecha</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Vacuna</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Laboratorio</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Próxima Dosis</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Estado</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {vaccinations.map((vaccination) => {\n                        const result = VaccineCalculator.calculateNextVaccination({\n                          vaccinationDate: vaccination.date,\n                          customDuration: vaccination.validityDays\n                        });\n                        \n                        return (\n                          <tr key={vaccination.id}>\n                            <td className=\"border border-gray-300 p-3\">\n                              {new Date(vaccination.date).toLocaleDateString('es-CL')}\n                            </td>\n                            <td className=\"border border-gray-300 p-3\">{vaccination.vaccine}</td>\n                            <td className=\"border border-gray-300 p-3\">{vaccination.laboratory}</td>\n                            <td className=\"border border-gray-300 p-3\">\n                              {new Date(vaccination.nextDue).toLocaleDateString('es-CL')}\n                            </td>\n                            <td className=\"border border-gray-300 p-3\">\n                              <span className={`font-medium ${\n                                result.alertLevel === 'red' ? 'text-red-600' :\n                                result.alertLevel === 'yellow' ? 'text-yellow-600' : 'text-green-600'\n                              }`}>\n                                {result.isOverdue ? 'Vencida' : result.daysUntilDue <= 30 ? 'Próxima' : 'Vigente'}\n                              </span>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Deworming Tab */}\n        {activeTab === 'deworming' && (\n          <div className=\"space-y-6\">\n            {/* Add New Deworming */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-poppins\">Agregar Nueva Desparasitación</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"dewormingType\">Tipo de Desparasitación</Label>\n                    <Select value={newDeworming.type} onValueChange={(value) => setNewDeworming({...newDeworming, type: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"internal\">Interna</SelectItem>\n                        <SelectItem value=\"external\">Externa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"product\">Producto *</Label>\n                    <Input\n                      id=\"product\"\n                      value={newDeworming.product}\n                      onChange={(e) => setNewDeworming({...newDeworming, product: e.target.value})}\n                      placeholder=\"Nombre del producto\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"activeIngredient\">Principio Activo</Label>\n                    <Input\n                      id=\"activeIngredient\"\n                      value={newDeworming.activeIngredient}\n                      onChange={(e) => setNewDeworming({...newDeworming, activeIngredient: e.target.value})}\n                      placeholder=\"Principio activo\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"laboratory\">Laboratorio</Label>\n                    <Input\n                      id=\"laboratory\"\n                      value={newDeworming.laboratory}\n                      onChange={(e) => setNewDeworming({...newDeworming, laboratory: e.target.value})}\n                      placeholder=\"Laboratorio\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"batchNumber\">Lote</Label>\n                    <Input\n                      id=\"batchNumber\"\n                      value={newDeworming.batchNumber}\n                      onChange={(e) => setNewDeworming({...newDeworming, batchNumber: e.target.value})}\n                      placeholder=\"Número de lote\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"date\">Fecha de Aplicación *</Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={newDeworming.date}\n                      onChange={(e) => setNewDeworming({...newDeworming, date: e.target.value})}\n                      required\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"notes\">Notas</Label>\n                    <Textarea\n                      id=\"notes\"\n                      value={newDeworming.notes}\n                      onChange={(e) => setNewDeworming({...newDeworming, notes: e.target.value})}\n                      placeholder=\"Observaciones adicionales...\"\n                      rows={3}\n                    />\n                  </div>\n                </div>\n                <Button onClick={addDeworming} className=\"mt-4 bg-mint text-darkgray hover:bg-mint/80\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Agregar Desparasitación\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Deworming History */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-poppins\">Historial de Desparasitación</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-gray-50\">\n                        <th className=\"border border-gray-300 p-3 text-left\">Fecha</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Tipo</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Producto</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Principio Activo</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Próxima Dosis</th>\n                        <th className=\"border border-gray-300 p-3 text-left\">Aplicado por</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {dewormings.map((deworming) => (\n                        <tr key={deworming.id}>\n                          <td className=\"border border-gray-300 p-3\">\n                            {new Date(deworming.date).toLocaleDateString('es-CL')}\n                          </td>\n                          <td className=\"border border-gray-300 p-3\">\n                            <span className={`px-2 py-1 rounded text-sm ${\n                              deworming.type === 'internal' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'\n                            }`}>\n                              {deworming.type === 'internal' ? 'Interna' : 'Externa'}\n                            </span>\n                          </td>\n                          <td className=\"border border-gray-300 p-3\">{deworming.product}</td>\n                          <td className=\"border border-gray-300 p-3\">{deworming.activeIngredient}</td>\n                          <td className=\"border border-gray-300 p-3\">\n                            {new Date(deworming.nextDue).toLocaleDateString('es-CL')}\n                          </td>\n                          <td className=\"border border-gray-300 p-3 text-sm\">{deworming.veterinarian}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OwnerPortal;","size_bytes":26657},"client/src/pages/ProfessionalPortal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport { validateRut, formatRut } from '@/lib/rutValidator';\nimport { getVaccinesBySpecies, chileanVaccines } from '@/lib/vaccines';\nimport { veterinarianConfig } from '@/config/veterinarian';\nimport { getBreedsBySpecies } from '@/lib/breeds';\nimport { VaccineCalculator } from '@/lib/vaccineCalculator';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { WhatsAppNotification } from '@/components/ui/whatsapp-notification';\nimport { useToast } from '@/hooks/use-toast';\nimport { WhatsAppService } from '@/lib/whatsapp';\n\nconst ProfessionalPortal = () => {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [activeTab, setActiveTab] = useState('dashboard');\n\n  // Usar configuración profesional desde archivo separado\n  const veterinarianInfo = veterinarianConfig;\n  \n  const [searchData, setSearchData] = useState({\n    recordNumber: '',\n    name: '',\n    rut: ''\n  });\n\n  const [patientData, setPatientData] = useState({\n    name: 'Max',\n    species: 'Canino',\n    breed: 'Yorkshire Terrier',\n    weight: '3.5 kg',\n    consultation: 'Control rutinario - paciente en excelente estado de salud.'\n  });\n\n  const [showPatientData, setShowPatientData] = useState(true);\n  const [selectedPet, setSelectedPet] = useState<string | null>(null);\n  \n  // Mock data for pets, medical records, and vaccinations\n  const [pets] = useState([\n    {\n      id: '1',\n      name: 'Max',\n      species: 'Perro',\n      breed: 'Yorkshire Terrier',\n      sex: 'Macho',\n      color: 'Marrón y negro',\n      birthDate: '2020-05-15',\n      microchipId: '9840000123456789',\n      ownerId: '1'\n    },\n    {\n      id: '2',\n      name: 'Luna',\n      species: 'Gato',\n      breed: 'Persa',\n      sex: 'Hembra',\n      color: 'Blanco',\n      birthDate: '2019-08-22',\n      microchipId: '9840000987654321',\n      ownerId: '2'\n    }\n  ]);\n\n  const [medicalRecords] = useState([\n    {\n      id: '1',\n      petId: '1',\n      date: '2023-12-15',\n      diagnosis: 'Control rutinario',\n      treatment: 'Vacunación y desparasitación',\n      notes: 'Paciente en excelente estado de salud',\n      veterinarianId: '1'\n    }\n  ]);\n\n  const [vaccinations] = useState([\n    {\n      id: '1',\n      petId: '1',\n      vaccine: 'Vanguard Plus 5 (Distemper, Adenovirus, Parvovirus, Parainfluenza)',\n      date: '2023-12-15',\n      nextDue: '2024-12-15',\n      veterinarianId: '1',\n      batchNumber: 'VAG123ABC',\n      laboratory: 'Zoetis'\n    },\n    {\n      id: '2',\n      petId: '1',\n      vaccine: 'Antirrábica',\n      date: '2023-11-20',\n      nextDue: '2024-11-20',\n      veterinarianId: '1',\n      batchNumber: 'RAB456DEF',\n      laboratory: 'Zoetis'\n    }\n  ]);\n\n  const [vaccineData, setVaccineData] = useState({\n    vaccineId: 'zoetis-vanguard-plus5',\n    laboratory: 'Zoetis',\n    batch: 'VAG123ABC',\n    date: new Date().toISOString().split('T')[0],\n    pathogens: ['Distemper', 'Adenovirus tipo 1', 'Adenovirus tipo 2', 'Parainfluenza', 'Parvovirus'],\n    validityDays: 365,\n    vaccineType: 'viva modificada',\n    serialNumber: '',\n    applicationSite: 'Cuello (subcutáneo)',\n    veterinarianNotes: ''\n  });\n\n  const [dewormingData, setDewormingData] = useState({\n    type: 'internal',\n    product: '',\n    activeIngredient: '',\n    laboratory: '',\n    batch: '',\n    date: new Date().toISOString().split('T')[0],\n    time: new Date().toLocaleTimeString('es-CL', { hour: '2-digit', minute: '2-digit' }),\n    notes: ''\n  });\n\n  const [petFormData, setPetFormData] = useState({\n    name: '',\n    species: '',\n    breed: '',\n    sex: '',\n    color: '',\n    birthDate: '',\n    weight: '',\n    microchipId: '',\n    ownerName: '',\n    ownerRUT: '',\n    ownerPhone: '',\n    ownerAddress: '',\n    ownerEmail: ''\n  });\n\n  const [examData, setExamData] = useState({\n    examType: '',\n    urgency: 'normal',\n    fastingRequired: false,\n    instructions: '',\n    observations: ''\n  });\n\n  // Mock data for demonstration\n  const [patientHistory] = useState([\n    {\n      id: '001',\n      date: '15/12/2023',\n      type: 'Vacunación',\n      vaccine: 'Vanguard Plus 5 - Zoetis',\n      doctor: 'Dra. María González',\n      notes: 'Vacuna aplicada sin complicaciones'\n    },\n    {\n      id: '002', \n      date: '10/11/2023',\n      type: 'Consulta',\n      description: 'Control rutinario',\n      doctor: 'Dra. María González',\n      notes: 'Paciente en excelente estado'\n    }\n  ]);\n\n  // Available exams with automatic instructions\n  const availableExams = [\n    {\n      id: 'hemograma',\n      name: 'Hemograma Completo',\n      category: 'Hematología',\n      defaultInstructions: `PREPARACIÓN PARA HEMOGRAMA COMPLETO:\n\n• AYUNO: 12 horas mínimo\n• HORARIO: No alimentar desde las 20:00 hrs del día anterior\n• AGUA: Permitida hasta 2 horas antes del examen\n• MEDICAMENTOS: Consultar si debe suspender algún medicamento\n• EJERCICIO: Evitar ejercicio intenso 24 horas antes\n• LLEGADA: Puntual a la hora agendada para evitar estrés\n\nIMPORTANTE: Traer a la mascota tranquila y en ayunas completo.`,\n      fastingRequired: true,\n      urgency: 'normal'\n    },\n    {\n      id: 'bioquimica',\n      name: 'Perfil Bioquímico Completo',\n      category: 'Bioquímica',\n      defaultInstructions: `PREPARACIÓN PARA PERFIL BIOQUÍMICO:\n\n• AYUNO ESTRICTO: 12-14 horas\n• HORARIO: No alimentar desde las 19:00 hrs del día anterior\n• AGUA: Retirar 3 horas antes del examen\n• MEDICAMENTOS: Suspender vitaminas y suplementos 24 hrs antes\n• EJERCICIO: Reposo relativo 24 horas previas\n• ESTRÉS: Mantener ambiente calmado antes del examen\n\nINCLUYE: Función renal, hepática, glucosa, proteínas, electrolitos.`,\n      fastingRequired: true,\n      urgency: 'normal'\n    },\n    {\n      id: 'orina',\n      name: 'Examen Completo de Orina',\n      category: 'Urianálisis',\n      defaultInstructions: `RECOLECCIÓN DE MUESTRA DE ORINA:\n\n• RECOLECCIÓN: Primera orina de la mañana (más concentrada)\n• CONTENEDOR: Frasco estéril (proporcionado por laboratorio)\n• TIEMPO: Máximo 2 horas entre recolección y entrega\n• CONSERVACIÓN: Mantener refrigerada (NO congelar)\n• CANTIDAD: Mínimo 10ml para análisis completo\n• HIGIENE: Limpiar área genital antes de recolectar\n\nINCLUYE: Físico-químico, sedimento urinario, densidad.`,\n      fastingRequired: false,\n      urgency: 'normal'\n    },\n    {\n      id: 'coprologico',\n      name: 'Examen Coprológico y Parasitológico',\n      category: 'Parasitología',\n      defaultInstructions: `RECOLECCIÓN DE MUESTRA FECAL:\n\n• FRESCURA: Muestra de menos de 2 horas\n• CANTIDAD: 2-3 cucharadas en frasco estéril\n• MÚLTIPLES MUESTRAS: 3 días consecutivos (recomendado)\n• CONSERVACIÓN: Temperatura ambiente, NO refrigerar\n• EVITAR: Muestras del suelo o contaminadas\n• MEDICAMENTOS: No desparasitar 7 días antes\n\nDETECTA: Parásitos, huevos, larvas, protozoarios, sangre oculta.`,\n      fastingRequired: false,\n      urgency: 'normal'\n    },\n    {\n      id: 'radiografia',\n      name: 'Radiografía Digital',\n      category: 'Diagnóstico por Imagen',\n      defaultInstructions: `PREPARACIÓN PARA RADIOGRAFÍA:\n\n• AYUNO: 8-12 horas (según región a examinar)\n• OBJETOS METÁLICOS: Retirar collar, tags, arnés\n• SEDACIÓN: Evaluar necesidad según temperamento\n• POSICIONAMIENTO: Requerirá quietud durante toma\n• ÁREAS: Especificar región exacta a radiografiar\n• ESTUDIOS PREVIOS: Traer radiografías anteriores si existen\n\nAPLICACIONES: Fracturas, displasia, cuerpos extraños, tórax, abdomen.`,\n      fastingRequired: true,\n      urgency: 'normal'\n    },\n    {\n      id: 'ecografia',\n      name: 'Ecografía Abdominal Completa',\n      category: 'Diagnóstico por Imagen',\n      defaultInstructions: `PREPARACIÓN PARA ECOGRAFÍA ABDOMINAL:\n\n• AYUNO: 12 horas estricto\n• VEJIGA: Debe estar moderadamente llena\n• RASURADO: Área abdominal completa (realizado en consulta)\n• SEDACIÓN: Generalmente no necesaria\n• TRANQUILIDAD: Mantener relajado durante procedimiento\n• AGUA: 1-2 horas antes dar pequeña cantidad\n\nEVALÚA: Hígado, riñones, vesícula, bazo, intestinos, vejiga, próstata/útero.`,\n      fastingRequired: true,\n      urgency: 'normal'\n    },\n    {\n      id: 'cultivo',\n      name: 'Cultivo Bacteriológico',\n      category: 'Microbiología',\n      defaultInstructions: `TOMA DE MUESTRA PARA CULTIVO:\n\n• ANTIBIÓTICOS: Suspender 48-72 horas antes (consultar veterinario)\n• ASEPSIA: Toma de muestra con técnica estéril\n• SITIOS: Especificar sitio exacto (oído, piel, orina, herida)\n• TRANSPORTE: Medio de cultivo apropiado\n• TIEMPO: Entregar inmediatamente al laboratorio\n• IDENTIFICACIÓN: Clara identificación del sitio\n\nINCLUYE: Identificación bacteriana, antibiograma, sensibilidad.`,\n      fastingRequired: false,\n      urgency: 'urgente'\n    },\n    {\n      id: 'citologia',\n      name: 'Citología',\n      category: 'Patología',\n      defaultInstructions: `PREPARACIÓN PARA CITOLOGÍA:\n\n• LESIÓN: No limpiar ni medicar 24 horas antes\n• ASPIRADO: Técnica de aspiración con aguja fina\n• IMPRESIÓN: Múltiples impresiones en portaobjetos\n• FIJACIÓN: Secado al aire, no fijar con alcohol\n• SITIOS: Especificar ubicación exacta de lesión\n• MÚLTIPLES: Varias muestras aumentan precisión\n\nEVALÚA: Células inflamatorias, neoplásicas, infecciosas.`,\n      fastingRequired: false,\n      urgency: 'normal'\n    },\n    {\n      id: 'histopatologia',\n      name: 'Histopatología',\n      category: 'Patología',\n      defaultInstructions: `TOMA DE BIOPSIA PARA HISTOPATOLOGÍA:\n\n• TÉCNICA ASÉPTICA: Instrumental estéril para biopsia\n• TAMAÑO: Muestra representativa del tejido\n• FIJACIÓN: Inmediata en formalina tamponada 10%\n• PROPORCIÓN: 1 parte tejido : 10 partes formalina\n• IDENTIFICACIÓN: Clara ubicación anatómica\n• REFRIGERACIÓN: NO congelar, temperatura ambiente\n\nTIEMPO RESULTADO: 7-10 días hábiles. Diagnóstico histológico definitivo.`,\n      fastingRequired: false,\n      urgency: 'normal'\n    },\n    {\n      id: 'otros',\n      name: 'Otros Exámenes',\n      category: 'Varios',\n      defaultInstructions: `EXÁMENES ESPECIALIZADOS:\n\n• ESPECIFICAR: Tipo de examen exacto solicitado\n• PREPARACIÓN: Según indicaciones específicas del examen\n• LABORATORIO: Confirmar disponibilidad en laboratorio\n• TIEMPO: Consultar tiempo de entrega de resultados\n• COSTO: Confirmar valor antes de realizar\n• MUESTRA: Seguir protocolo específico de recolección\n\nEJEMPLOS: Hormonas tiroideas, cortisol, progesterona, pruebas alérgicas.`,\n      fastingRequired: false,\n      urgency: 'normal'\n    }\n  ];\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/');\n    }\n  }, [user, loading, setLocation]);\n\n  const handleSearch = () => {\n    // Validate RUT if provided\n    if (searchData.rut) {\n      const rutValidation = validateRut(searchData.rut);\n      if (!rutValidation.isValid) {\n        toast({\n          title: \"RUT inválido\",\n          description: rutValidation.error,\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n\n    // Here you would implement the actual search logic with Firebase\n    toast({\n      title: \"Búsqueda realizada\",\n      description: \"Funcionalidad de búsqueda implementada con Firebase\",\n    });\n  };\n\n  const handleVaccineSelect = (vaccineId: string) => {\n    const vaccine = chileanVaccines.find(v => v.id === vaccineId);\n    if (vaccine) {\n      setVaccineData({\n        ...vaccineData,\n        vaccineId,\n        laboratory: vaccine.laboratory,\n        pathogens: vaccine.pathogens\n      });\n    }\n  };\n\n  const handleRutInput = (value: string) => {\n    const formatted = formatRut(value);\n    setSearchData({ ...searchData, rut: formatted });\n  };\n\n  const handleExamSelect = (examId: string) => {\n    const exam = availableExams.find(e => e.id === examId);\n    if (exam) {\n      setExamData({\n        ...examData,\n        examType: examId,\n        fastingRequired: exam.fastingRequired,\n        instructions: exam.defaultInstructions,\n        urgency: exam.urgency\n      });\n    }\n  };\n\n  const generateExamOrder = () => {\n    const exam = availableExams.find(e => e.id === examData.examType);\n    if (!exam) {\n      toast({\n        title: \"Error\",\n        description: \"Selecciona un tipo de examen\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const orderNumber = `ORD-${Date.now()}`;\n    \n    // Here you would implement PDF generation with html2pdf\n    toast({\n      title: \"Orden de examen generada\",\n      description: `Orden ${orderNumber} para ${exam.name} generándose con html2pdf`,\n    });\n\n    // Reset form\n    setExamData({\n      examType: '',\n      urgency: 'normal',\n      fastingRequired: false,\n      instructions: '',\n      observations: ''\n    });\n  };\n\n  const sendExamInstructionsWhatsApp = (petName: string, clientPhone: string) => {\n    const exam = availableExams.find(e => e.id === examData.examType);\n    if (!exam) return;\n\n    const message = WhatsAppService.sendExamReminder({\n      clientName: \"Cliente\",\n      petName: petName,\n      examType: exam.name,\n      examDate: \"Próximamente\",\n      instructions: exam.defaultInstructions,\n      veterinarianName: veterinarianInfo.name,\n      clinicPhone: veterinarianInfo.phone\n    });\n\n    WhatsAppService.openWhatsApp(clientPhone, message);\n    \n    toast({\n      title: \"WhatsApp abierto\",\n      description: \"Se enviarán las instrucciones del examen al cliente\"\n    });\n  };\n\n  const generateCertificate = async (type: string) => {\n    if (type === 'exportación') {\n      await generateSAGExportCertificate();\n    } else {\n      // Otros tipos de certificados\n      toast({\n        title: \"Generando certificado\",\n        description: `Certificado de ${type} generándose con html2pdf`,\n      });\n    }\n  };\n\n  const generateSAGExportCertificate = async () => {\n    if (!selectedPet) {\n      toast({\n        title: \"Error\",\n        description: \"Selecciona una mascota para generar el certificado\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      // Importar dinámicamente el servicio SAG\n      const { SAGCertificateService } = await import('@/lib/sagCertificate');\n      \n      // Obtener datos de la mascota seleccionada\n      const petData = pets.find(p => p.id === selectedPet);\n      if (!petData) {\n        throw new Error(\"No se encontraron datos de la mascota\");\n      }\n\n      // Obtener registros médicos y vacunas de la mascota\n      const petMedicalRecords = medicalRecords.filter(record => record.petId === selectedPet);\n      const petVaccinations = vaccinations.filter(vaccination => vaccination.petId === selectedPet);\n\n      // Datos simulados del dueño (en una app real esto vendría de la base de datos)\n      const ownerData = {\n        name: \"Juan Pérez González\",\n        rut: \"12.345.678-9\",\n        phone: \"+56 9 8765 4321\",\n        address: \"Av. Las Condes 1234, Las Condes, Santiago\"\n      };\n\n      // Generar datos del certificado SAG\n      const certificateData = SAGCertificateService.generateCertificateData(\n        petData,\n        ownerData,\n        petMedicalRecords,\n        petVaccinations\n      );\n\n      // Generar HTML del certificado\n      const certificateHTML = SAGCertificateService.generateHTMLCertificate(certificateData);\n\n      // Crear una nueva ventana para mostrar el certificado\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      if (printWindow) {\n        printWindow.document.write(certificateHTML);\n        printWindow.document.close();\n        \n        // Esperar a que cargue e imprimir\n        printWindow.onload = () => {\n          setTimeout(() => {\n            printWindow.print();\n          }, 1000);\n        };\n      }\n\n      toast({\n        title: \"Certificado SAG generado\",\n        description: \"Certificado de exportación oficial generado correctamente\",\n      });\n\n    } catch (error) {\n      console.error('Error generando certificado SAG:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo generar el certificado de exportación\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-warmbeige flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-mint mb-4\"></i>\n          <p className=\"text-darkgray font-poppins\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warmbeige pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-poppins font-bold text-darkgray mb-2\">Portal Profesional</h1>\n              <p className=\"text-gray-600 font-lato\">Gestión de fichas clínicas y certificados - {veterinarianInfo.name}</p>\n              <p className=\"text-sm text-gray-500 font-lato\">{veterinarianInfo.title} • {veterinarianInfo.speciality} • {veterinarianInfo.license}</p>\n            </div>\n            <Button onClick={() => setLocation('/')} variant=\"outline\">\n              <i className=\"fas fa-home mr-2\"></i>\n              Volver al Inicio\n            </Button>\n          </div>\n\n          {/* Statistics Dashboard */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"bg-gradient-to-br from-mint to-turquoise text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <i className=\"fas fa-paw text-3xl mb-3\"></i>\n                <div className=\"text-2xl font-poppins font-bold\">24</div>\n                <div className=\"text-sm opacity-90\">Pacientes Activos</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-br from-lavender to-palerose text-darkgray\">\n              <CardContent className=\"p-6 text-center\">\n                <i className=\"fas fa-syringe text-3xl mb-3\"></i>\n                <div className=\"text-2xl font-poppins font-bold\">8</div>\n                <div className=\"text-sm opacity-70\">Vacunas Hoy</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-br from-turquoise to-mint text-white\">\n              <CardContent className=\"p-6 text-center\">\n                <i className=\"fas fa-certificate text-3xl mb-3\"></i>\n                <div className=\"text-2xl font-poppins font-bold\">12</div>\n                <div className=\"text-sm opacity-90\">Certificados Mes</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-br from-palerose to-lavender text-darkgray\">\n              <CardContent className=\"p-6 text-center\">\n                <i className=\"fas fa-calendar-check text-3xl mb-3\"></i>\n                <div className=\"text-2xl font-poppins font-bold\">5</div>\n                <div className=\"text-sm opacity-70\">Citas Pendientes</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"mb-6\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 overflow-x-auto\">\n              <button\n                onClick={() => setActiveTab('dashboard')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  activeTab === 'dashboard' \n                    ? 'border-mint text-mint' \n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <i className=\"fas fa-chart-line mr-2\"></i>\n                Dashboard\n              </button>\n              <button\n                onClick={() => setActiveTab('patients')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  activeTab === 'patients' \n                    ? 'border-mint text-mint' \n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <i className=\"fas fa-paw mr-2\"></i>\n                Pacientes\n              </button>\n              <button\n                onClick={() => setActiveTab('exams')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  activeTab === 'exams' \n                    ? 'border-mint text-mint' \n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <i className=\"fas fa-flask mr-2\"></i>\n                Solicitar Exámenes\n              </button>\n              <button\n                onClick={() => setActiveTab('certificates')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  activeTab === 'certificates' \n                    ? 'border-mint text-mint' \n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <i className=\"fas fa-certificate mr-2\"></i>\n                Certificados\n              </button>\n              <button\n                onClick={() => setActiveTab('profile')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                  activeTab === 'profile' \n                    ? 'border-mint text-mint' \n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <i className=\"fas fa-user-md mr-2\"></i>\n                Mi Perfil\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        {activeTab === 'dashboard' && (\n          <div>\n            {/* Search Bar */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"font-poppins\">Buscar Paciente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n              <div>\n                <Label htmlFor=\"recordNumber\">Número de ficha</Label>\n                <Input\n                  id=\"recordNumber\"\n                  value={searchData.recordNumber}\n                  onChange={(e) => setSearchData({ ...searchData, recordNumber: e.target.value })}\n                  placeholder=\"12345\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"name\">Nombre (sin tildes)</Label>\n                <Input\n                  id=\"name\"\n                  value={searchData.name}\n                  onChange={(e) => setSearchData({ ...searchData, name: e.target.value })}\n                  placeholder=\"max\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"rut\">RUT del tutor</Label>\n                <Input\n                  id=\"rut\"\n                  value={searchData.rut}\n                  onChange={(e) => handleRutInput(e.target.value)}\n                  placeholder=\"12345678-9\"\n                />\n              </div>\n            </div>\n            <Button onClick={handleSearch} className=\"bg-mint text-darkgray hover:bg-mint/80\">\n              <i className=\"fas fa-search mr-2\"></i>\n              Buscar\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Patient Management */}\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-8\">\n          {/* Clinical Record Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-poppins\">Ficha Clínica</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"petName\">Nombre de la mascota</Label>\n                <Input\n                  id=\"petName\"\n                  value={patientData.name}\n                  onChange={(e) => setPatientData({ ...patientData, name: e.target.value })}\n                  placeholder=\"Max\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"species\">Especie</Label>\n                <Select onValueChange={(value) => setPatientData({ ...patientData, species: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar especie\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Canino\">Canino</SelectItem>\n                    <SelectItem value=\"Felino\">Felino</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"breed\">Raza</Label>\n                <Input\n                  id=\"breed\"\n                  value={patientData.breed}\n                  onChange={(e) => setPatientData({ ...patientData, breed: e.target.value })}\n                  placeholder=\"Yorkshire Terrier\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"weight\">Peso</Label>\n                <Input\n                  id=\"weight\"\n                  value={patientData.weight}\n                  onChange={(e) => setPatientData({ ...patientData, weight: e.target.value })}\n                  placeholder=\"3.5 kg\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"consultation\">Consulta</Label>\n                <Textarea\n                  id=\"consultation\"\n                  value={patientData.consultation}\n                  onChange={(e) => setPatientData({ ...patientData, consultation: e.target.value })}\n                  placeholder=\"Descripción de la consulta\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Vaccine Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-poppins\">Gestión de Vacunas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"vaccine\">Vacuna</Label>\n                <Select onValueChange={handleVaccineSelect}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar vacuna...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {chileanVaccines.map((vaccine) => (\n                      <SelectItem key={vaccine.id} value={vaccine.id}>\n                        {vaccine.name} - {vaccine.laboratory}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"laboratory\">Laboratorio</Label>\n                  <Input\n                    id=\"laboratory\"\n                    value={vaccineData.laboratory}\n                    readOnly\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"vaccineDate\">Fecha</Label>\n                  <Input\n                    id=\"vaccineDate\"\n                    type=\"date\"\n                    value={vaccineData.date}\n                    onChange={(e) => setVaccineData({ ...vaccineData, date: e.target.value })}\n                    max={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"batch\">Lote</Label>\n                <Input\n                  id=\"batch\"\n                  value={vaccineData.batch}\n                  onChange={(e) => setVaccineData({ ...vaccineData, batch: e.target.value })}\n                  placeholder=\"A1B2C3\"\n                />\n              </div>\n              {vaccineData.pathogens.length > 0 && (\n                <div>\n                  <Label>Patógenos cubiertos</Label>\n                  <div className=\"mt-2 text-sm text-gray-600\">\n                    {vaccineData.pathogens.join(', ')}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Patient History */}\n        {showPatientData && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"font-poppins flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-history text-mint mr-2\"></i>\n                  Historial Médico - {patientData.name}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <WhatsAppNotification \n                    clientName=\"Juan Pérez\"\n                    clientPhone=\"+56912345678\"\n                    petName={patientData.name}\n                  />\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {patientHistory.map((record) => (\n                  <div key={record.id} className=\"border-l-4 border-mint pl-4 py-3 bg-white/50 rounded-r-lg\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-poppins font-medium text-darkgray flex items-center\">\n                          <i className={`${record.type === 'Vacunación' ? 'fas fa-syringe text-lavender' : 'fas fa-stethoscope text-turquoise'} mr-2`}></i>\n                          {record.type}\n                        </h4>\n                        <p className=\"text-gray-600 font-lato\">\n                          {record.vaccine || record.description}\n                        </p>\n                        <p className=\"text-sm text-gray-500 font-lato\">{record.date} - {record.doctor}</p>\n                        <p className=\"text-sm text-gray-600 font-lato italic\">{record.notes}</p>\n                      </div>\n                      <Button \n                        size=\"sm\"\n                        className=\"bg-palerose text-darkgray hover:bg-palerose/80\"\n                      >\n                        <i className=\"fas fa-download mr-1\"></i>\n                        PDF\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* PDF Generation Tools */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"font-poppins flex items-center\">\n              <i className=\"fas fa-file-pdf text-turquoise mr-2\"></i>\n              Generar Documentos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* Pet Selection for Certificate Generation */}\n            <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n              <Label htmlFor=\"petSelect\" className=\"font-poppins font-medium\">Seleccionar Mascota para Certificados</Label>\n              <Select value={selectedPet || ''} onValueChange={setSelectedPet}>\n                <SelectTrigger className=\"mt-2\">\n                  <SelectValue placeholder=\"Selecciona una mascota...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {pets.map((pet) => (\n                    <SelectItem key={pet.id} value={pet.id}>\n                      {pet.name} - {pet.species} ({pet.breed})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedPet && (\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <i className=\"fas fa-check-circle text-green-600 mr-1\"></i>\n                  Mascota seleccionada: {pets.find(p => p.id === selectedPet)?.name}\n                </div>\n              )}\n            </div>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <Button \n                onClick={() => generateCertificate('salud')}\n                className=\"bg-mint text-darkgray hover:bg-mint/80 p-6 h-auto flex flex-col items-center space-y-2\"\n              >\n                <i className=\"fas fa-certificate text-3xl\"></i>\n                <div>\n                  <div className=\"font-semibold\">Certificado de Salud</div>\n                  <div className=\"text-sm opacity-80\">Para consultas veterinarias</div>\n                </div>\n              </Button>\n              <Button \n                onClick={() => generateCertificate('exportación')}\n                className=\"bg-lavender text-darkgray hover:bg-lavender/80 p-6 h-auto flex flex-col items-center space-y-2\"\n                disabled={!selectedPet}\n              >\n                <i className=\"fas fa-plane text-3xl\"></i>\n                <div>\n                  <div className=\"font-semibold\">Certificado SAG de Exportación</div>\n                  <div className=\"text-sm opacity-80\">Formato oficial - Llenado automático</div>\n                  {!selectedPet && <div className=\"text-xs text-red-600 mt-1\">Selecciona una mascota</div>}\n                </div>\n              </Button>\n              <Button \n                onClick={() => generateCertificate('receta')}\n                className=\"bg-turquoise text-darkgray hover:bg-turquoise/80 p-6 h-auto flex flex-col items-center space-y-2\"\n              >\n                <i className=\"fas fa-prescription text-3xl\"></i>\n                <div>\n                  <div className=\"font-semibold\">Receta Médica</div>\n                  <div className=\"text-sm opacity-80\">Prescripciones y tratamientos</div>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-poppins flex items-center\">\n              <i className=\"fas fa-bolt text-palerose mr-2\"></i>\n              Acciones Rápidas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center space-y-2\">\n                <i className=\"fas fa-plus-circle text-mint text-2xl\"></i>\n                <span className=\"text-sm\">Nueva Consulta</span>\n              </Button>\n              <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center space-y-2\">\n                <i className=\"fas fa-syringe text-lavender text-2xl\"></i>\n                <span className=\"text-sm\">Registrar Vacuna</span>\n              </Button>\n              <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center space-y-2\">\n                <i className=\"fas fa-pills text-turquoise text-2xl\"></i>\n                <span className=\"text-sm\">Desparasitación</span>\n              </Button>\n              <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center space-y-2\">\n                <i className=\"fas fa-camera text-palerose text-2xl\"></i>\n                <span className=\"text-sm\">Subir Imagen</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n          </div>\n        )}\n\n        {/* Exam Request Tab */}\n        {activeTab === 'exams' && (\n          <div>\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"font-poppins flex items-center\">\n                  <i className=\"fas fa-flask text-mint mr-2\"></i>\n                  Solicitar Exámenes de Laboratorio\n                </CardTitle>\n                <p className=\"text-gray-600 font-lato\">Genera automáticamente órdenes médicas con indicaciones para el tutor</p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Patient Selection */}\n                <div>\n                  <Label className=\"text-base font-semibold\">Información del Paciente</Label>\n                  <div className=\"grid md:grid-cols-3 gap-4 mt-2 p-4 bg-mint/5 rounded-lg\">\n                    <div>\n                      <Label htmlFor=\"patientName\">Nombre de la mascota</Label>\n                      <Input\n                        id=\"patientName\"\n                        placeholder=\"Max\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"tutorName\">Nombre del tutor</Label>\n                      <Input\n                        id=\"tutorName\"\n                        placeholder=\"Juan Pérez\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"tutorPhone\">Teléfono</Label>\n                      <Input\n                        id=\"tutorPhone\"\n                        placeholder=\"+56 9 1234 5678\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Exam Selection */}\n                <div>\n                  <Label className=\"text-base font-semibold\">Tipo de Examen</Label>\n                  <Select onValueChange={handleExamSelect}>\n                    <SelectTrigger className=\"mt-2\">\n                      <SelectValue placeholder=\"Seleccionar tipo de examen\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableExams.map((exam) => (\n                        <SelectItem key={exam.id} value={exam.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{exam.name}</span>\n                            <span className=\"text-sm text-gray-500\">{exam.category}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Exam Details */}\n                {examData.examType && (\n                  <div className=\"p-4 bg-lavender/10 rounded-lg space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-semibold text-darkgray\">\n                        {availableExams.find(e => e.id === examData.examType)?.name}\n                      </h4>\n                      {examData.fastingRequired && (\n                        <div className=\"flex items-center space-x-2 text-orange-600\">\n                          <i className=\"fas fa-exclamation-triangle\"></i>\n                          <span className=\"text-sm font-medium\">Requiere ayuno</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"urgency\">Urgencia</Label>\n                        <Select \n                          value={examData.urgency}\n                          onValueChange={(value) => setExamData({ ...examData, urgency: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"normal\">Normal (2-3 días)</SelectItem>\n                            <SelectItem value=\"urgente\">Urgente (24 horas)</SelectItem>\n                            <SelectItem value=\"emergencia\">Emergencia (inmediato)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"fasting\"\n                          checked={examData.fastingRequired}\n                          onChange={(e) => setExamData({ ...examData, fastingRequired: e.target.checked })}\n                          className=\"rounded\"\n                        />\n                        <Label htmlFor=\"fasting\">Requiere ayuno</Label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Instructions */}\n                <div>\n                  <Label htmlFor=\"instructions\" className=\"text-base font-semibold\">\n                    Instrucciones para el Tutor\n                  </Label>\n                  <textarea\n                    id=\"instructions\"\n                    value={examData.instructions}\n                    onChange={(e) => setExamData({ ...examData, instructions: e.target.value })}\n                    className=\"w-full mt-2 p-3 border border-gray-300 rounded-lg h-24 resize-none\"\n                    placeholder=\"Las instrucciones se generan automáticamente según el tipo de examen...\"\n                  />\n                </div>\n\n                {/* Observations */}\n                <div>\n                  <Label htmlFor=\"observations\">Observaciones Médicas (Opcional)</Label>\n                  <textarea\n                    id=\"observations\"\n                    value={examData.observations}\n                    onChange={(e) => setExamData({ ...examData, observations: e.target.value })}\n                    className=\"w-full mt-2 p-3 border border-gray-300 rounded-lg h-20 resize-none\"\n                    placeholder=\"Información adicional sobre el paciente o el examen solicitado...\"\n                  />\n                </div>\n\n                {/* Generate Button */}\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setExamData({\n                      examType: '',\n                      urgency: 'normal',\n                      fastingRequired: false,\n                      instructions: '',\n                      observations: ''\n                    })}\n                  >\n                    Limpiar Formulario\n                  </Button>\n                  <WhatsAppNotification \n                    clientName=\"Juan Pérez\"\n                    clientPhone=\"+56912345678\"\n                    petName=\"Max\"\n                  />\n                  <Button\n                    onClick={generateExamOrder}\n                    className=\"bg-mint text-darkgray hover:bg-mint/80\"\n                    disabled={!examData.examType}\n                  >\n                    <i className=\"fas fa-file-pdf mr-2\"></i>\n                    Generar Orden de Examen\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Example Orders */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-poppins flex items-center\">\n                  <i className=\"fas fa-file-contract text-turquoise mr-2\"></i>\n                  Órdenes Generadas Recientemente\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium\">ORD-2023120801 - Hemograma Completo</span>\n                      <p className=\"text-sm text-gray-600\">Max (Canino) - Juan Pérez - 15/12/2023</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <WhatsAppNotification \n                        clientName=\"Juan Pérez\"\n                        clientPhone=\"+56912345678\"\n                        petName=\"Max\"\n                      />\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-download mr-1\"></i>\n                        Descargar\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium\">ORD-2023120702 - Perfil Bioquímico</span>\n                      <p className=\"text-sm text-gray-600\">Luna (Felino) - María Silva - 14/12/2023</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <WhatsAppNotification \n                        clientName=\"María Silva\"\n                        clientPhone=\"+56987654321\"\n                        petName=\"Luna\"\n                      />\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-download mr-1\"></i>\n                        Descargar\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Profile Tab */}\n        {activeTab === 'profile' && (\n          <div>\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"font-poppins flex items-center\">\n                  <i className=\"fas fa-user-md text-mint mr-2\"></i>\n                  Mi Información Profesional\n                </CardTitle>\n                <p className=\"text-gray-600 font-lato\">Personaliza tu información para que aparezca en certificados y documentos</p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"vetName\" className=\"text-base font-semibold\">Nombre Completo</Label>\n                    <Input\n                      id=\"vetName\"\n                      defaultValue={veterinarianInfo.name}\n                      placeholder=\"Dr./Dra. Tu Nombre\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vetTitle\" className=\"text-base font-semibold\">Título Profesional</Label>\n                    <Input\n                      id=\"vetTitle\"\n                      defaultValue={veterinarianInfo.title}\n                      placeholder=\"Médico Veterinario\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vetSpeciality\" className=\"text-base font-semibold\">Especialidad</Label>\n                    <Input\n                      id=\"vetSpeciality\"\n                      defaultValue={veterinarianInfo.speciality}\n                      placeholder=\"Medicina Interna, Cirugía, etc.\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vetLicense\" className=\"text-base font-semibold\">Número de Colegiatura</Label>\n                    <Input\n                      id=\"vetLicense\"\n                      defaultValue={veterinarianInfo.license}\n                      placeholder=\"MV 12345\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vetPhone\" className=\"text-base font-semibold\">Teléfono</Label>\n                    <Input\n                      id=\"vetPhone\"\n                      defaultValue={veterinarianInfo.phone}\n                      placeholder=\"+56 9 1234 5678\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vetEmail\" className=\"text-base font-semibold\">Email</Label>\n                    <Input\n                      id=\"vetEmail\"\n                      defaultValue={veterinarianInfo.email}\n                      placeholder=\"tu@email.cl\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"clinicName\" className=\"text-base font-semibold\">Nombre de la Clínica</Label>\n                    <Input\n                      id=\"clinicName\"\n                      defaultValue={veterinarianInfo.clinicName}\n                      placeholder=\"Nombre de tu clínica\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"clinicAddress\" className=\"text-base font-semibold\">Dirección</Label>\n                    <Input\n                      id=\"clinicAddress\"\n                      defaultValue={veterinarianInfo.address}\n                      placeholder=\"Comuna, Ciudad\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"pt-4 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <h4 className=\"font-semibold text-darkgray mb-1\">Actualizar Información</h4>\n                      <p className=\"text-sm text-gray-600\">Los cambios se aplicarán a todos los documentos generados</p>\n                    </div>\n                    <Button className=\"bg-mint text-darkgray hover:bg-mint/80\">\n                      <i className=\"fas fa-save mr-2\"></i>\n                      Guardar Cambios\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Instructions Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-poppins flex items-center\">\n                  <i className=\"fas fa-info-circle text-turquoise mr-2\"></i>\n                  Cómo Personalizar tu Portal\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-mint/10 rounded-lg\">\n                    <h4 className=\"font-semibold text-darkgray mb-2\">\n                      <i className=\"fas fa-edit mr-2\"></i>\n                      Opción 1: Editar directamente en el código\n                    </h4>\n                    <p className=\"text-sm text-gray-700 mb-2\">\n                      Para cambios permanentes, edita el archivo <code className=\"bg-gray-200 px-1 rounded\">client/src/config/veterinarian.ts</code>\n                    </p>\n                    <div className=\"bg-gray-800 text-green-400 p-3 rounded text-xs font-mono\">\n                      <div>// CONFIGURACIÓN PROFESIONAL</div>\n                      <div>export const veterinarianConfig = {'{'}...</div>\n                      <div>&nbsp;&nbsp;name: 'Tu Nombre Aquí',</div>\n                      <div>&nbsp;&nbsp;title: 'Tu Título Profesional',</div>\n                      <div>&nbsp;&nbsp;speciality: 'Tu Especialidad',</div>\n                      <div>&nbsp;&nbsp;license: 'Tu Número de Colegiatura',</div>\n                      <div>&nbsp;&nbsp;phone: 'Tu Teléfono',</div>\n                      <div>&nbsp;&nbsp;email: 'Tu Email',</div>\n                      <div>&nbsp;&nbsp;clinicName: 'Nombre de tu Clínica',</div>\n                      <div>&nbsp;&nbsp;address: 'Tu Dirección'</div>\n                      <div>{'};'}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-lavender/10 rounded-lg\">\n                    <h4 className=\"font-semibold text-darkgray mb-2\">\n                      <i className=\"fas fa-database mr-2\"></i>\n                      Opción 2: Conexión con base de datos (Próximamente)\n                    </h4>\n                    <p className=\"text-sm text-gray-700\">\n                      Los cambios en este formulario se podrán guardar automáticamente en la base de datos\n                      para persistir entre sesiones.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalPortal;\n","size_bytes":52735},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/whatsapp-notification.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { MessageCircle, Send, Phone } from \"lucide-react\";\nimport { WhatsAppService } from \"@/lib/whatsapp\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WhatsAppNotificationProps {\n  clientName?: string;\n  clientPhone?: string;\n  petName?: string;\n}\n\nexport function WhatsAppNotification({ clientName = \"\", clientPhone = \"\", petName = \"\" }: WhatsAppNotificationProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    clientName,\n    clientPhone,\n    petName,\n    notificationType: \"\",\n    customMessage: \"\"\n  });\n  const { toast } = useToast();\n\n  const notificationTypes = [\n    { value: \"exam_reminder\", label: \"Recordatorio de Examen\" },\n    { value: \"appointment_confirmation\", label: \"Confirmación de Cita\" },\n    { value: \"results_ready\", label: \"Resultados Listos\" },\n    { value: \"vaccination_reminder\", label: \"Recordatorio de Vacunación\" },\n    { value: \"emergency_contact\", label: \"Contacto de Emergencia\" },\n    { value: \"custom\", label: \"Mensaje Personalizado\" }\n  ];\n\n  const handleSendNotification = () => {\n    if (!formData.clientPhone) {\n      toast({\n        title: \"Error\",\n        description: \"Número de teléfono requerido\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    let message = \"\";\n    const veterinarianName = \"Dra. Alejandra Cautín Bastías\";\n    const clinicPhone = \"+56 9 1234 5678\";\n\n    switch (formData.notificationType) {\n      case \"exam_reminder\":\n        message = WhatsAppService.sendExamReminder({\n          clientName: formData.clientName,\n          petName: formData.petName,\n          examType: \"Examen General\",\n          examDate: new Date().toLocaleDateString('es-CL'),\n          instructions: \"Ayuno de 12 horas. Traer carnet de vacunas.\",\n          veterinarianName,\n          clinicPhone\n        });\n        break;\n      \n      case \"appointment_confirmation\":\n        message = WhatsAppService.sendAppointmentConfirmation({\n          clientName: formData.clientName,\n          petName: formData.petName,\n          appointmentDate: new Date().toLocaleDateString('es-CL'),\n          appointmentTime: \"15:00\",\n          service: \"Consulta Veterinaria a Domicilio\",\n          address: \"Su domicilio\",\n          veterinarianName,\n          clinicPhone\n        });\n        break;\n      \n      case \"results_ready\":\n        message = WhatsAppService.sendExamResultsReady(\n          formData.clientName,\n          formData.petName,\n          \"Examen General\",\n          veterinarianName,\n          clinicPhone\n        );\n        break;\n      \n      case \"vaccination_reminder\":\n        message = WhatsAppService.sendVaccinationReminder(\n          formData.clientName,\n          formData.petName,\n          \"Vacuna Anual\",\n          new Date().toLocaleDateString('es-CL'),\n          veterinarianName,\n          clinicPhone\n        );\n        break;\n      \n      case \"emergency_contact\":\n        message = WhatsAppService.sendEmergencyContact(\n          formData.clientName,\n          formData.petName,\n          \"Consulta urgente\",\n          veterinarianName,\n          clinicPhone\n        );\n        break;\n      \n      case \"custom\":\n        message = formData.customMessage;\n        break;\n      \n      default:\n        toast({\n          title: \"Error\",\n          description: \"Selecciona un tipo de notificación\",\n          variant: \"destructive\"\n        });\n        return;\n    }\n\n    if (message) {\n      WhatsAppService.openWhatsApp(formData.clientPhone, message);\n      toast({\n        title: \"WhatsApp abierto\",\n        description: \"Se abrió WhatsApp con el mensaje preparado\"\n      });\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n          <MessageCircle className=\"h-4 w-4 text-green-600\" />\n          WhatsApp\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5 text-green-600\" />\n            Enviar Notificación WhatsApp\n          </DialogTitle>\n          <DialogDescription>\n            Envía notificaciones automáticas a los clientes vía WhatsApp\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"clientName\">Nombre del Cliente</Label>\n              <Input\n                id=\"clientName\"\n                value={formData.clientName}\n                onChange={(e) => setFormData({ ...formData, clientName: e.target.value })}\n                placeholder=\"Juan Pérez\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"petName\">Nombre de la Mascota</Label>\n              <Input\n                id=\"petName\"\n                value={formData.petName}\n                onChange={(e) => setFormData({ ...formData, petName: e.target.value })}\n                placeholder=\"Bobby\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"clientPhone\">Número de Teléfono</Label>\n            <div className=\"relative\">\n              <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"clientPhone\"\n                value={formData.clientPhone}\n                onChange={(e) => setFormData({ ...formData, clientPhone: e.target.value })}\n                placeholder=\"+56 9 1234 5678\"\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notificationType\">Tipo de Notificación</Label>\n            <Select value={formData.notificationType} onValueChange={(value) => setFormData({ ...formData, notificationType: value })}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecciona el tipo de notificación\" />\n              </SelectTrigger>\n              <SelectContent>\n                {notificationTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {formData.notificationType === \"custom\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customMessage\">Mensaje Personalizado</Label>\n              <Textarea\n                id=\"customMessage\"\n                value={formData.customMessage}\n                onChange={(e) => setFormData({ ...formData, customMessage: e.target.value })}\n                placeholder=\"Escribe tu mensaje personalizado aquí...\"\n                rows={4}\n              />\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancelar\n            </Button>\n            <Button onClick={handleSendNotification} className=\"gap-2 bg-green-600 hover:bg-green-700\">\n              <Send className=\"h-4 w-4\" />\n              Enviar por WhatsApp\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8021},"client/src/lib/breeds.ts":{"content":"// Lista completa de razas de perros y gatos para Chile\nexport const DOG_BREEDS = [\n  // Razas Toy y Miniatura\n  'Affenpinscher',\n  'Bichón Frisé',\n  'Bichón Maltés',\n  'Boston Terrier',\n  'Caniche Toy',\n  'Cavalier King Charles Spaniel',\n  'Chihuahua',\n  'Chinese Crested',\n  'Griffón de Bruselas',\n  'Havanese',\n  'Jack Russell Terrier',\n  'Japanese Chin',\n  'Lhasa Apso',\n  'Papillon',\n  'Pekinés',\n  'Pomerania',\n  'Pug',\n  'Schnauzer Miniatura',\n  'Shih Tzu',\n  'Silky Terrier',\n  'Toy Fox Terrier',\n  'Yorkshire Terrier',\n\n  // Razas Pequeñas\n  'Basset Hound',\n  'Beagle',\n  'Border Terrier',\n  'Cairn Terrier',\n  'Caniche Mediano',\n  'Cocker Spaniel Americano',\n  'Cocker Spaniel Inglés',\n  'Corgi Galés de Cardigan',\n  'Corgi Galés de Pembroke',\n  'Dachshund',\n  'Fox Terrier',\n  'French Bulldog',\n  'Parson Russell Terrier',\n  'Scottish Terrier',\n  'Sealyham Terrier',\n  'Shetland Sheepdog',\n  'Springer Spaniel Inglés',\n  'Staffordshire Bull Terrier',\n  'Terrier Tibetano',\n  'West Highland White Terrier',\n  'Wire Fox Terrier',\n\n  // Razas Medianas\n  'American Staffordshire Terrier',\n  'Australian Cattle Dog',\n  'Australian Shepherd',\n  'Basenji',\n  'Border Collie',\n  'Brittany',\n  'Bull Terrier',\n  'Bulldog Inglés',\n  'Caniche Estándar',\n  'Chow Chow',\n  'Dálmata',\n  'Finnish Spitz',\n  'Golden Retriever',\n  'Keeshond',\n  'Labrador Retriever',\n  'Pastor Australiano',\n  'Pointer',\n  'Samoyed',\n  'Siberian Husky',\n  'Standard Schnauzer',\n  'Vizsla',\n  'Weimaraner',\n  'Whippet',\n\n  // Razas Grandes\n  'Afgano',\n  'Airedale Terrier',\n  'Akita',\n  'Alaskan Malamute',\n  'Bernese Mountain Dog',\n  'Bloodhound',\n  'Borzoi',\n  'Boxer',\n  'Chesapeake Bay Retriever',\n  'Collie',\n  'Doberman Pinscher',\n  'Flat-Coated Retriever',\n  'German Shepherd',\n  'Giant Schnauzer',\n  'Gordon Setter',\n  'Greyhound',\n  'Irish Setter',\n  'Irish Wolfhound',\n  'Newfoundland',\n  'Old English Sheepdog',\n  'Otterhound',\n  'Pointer Alemán de Pelo Corto',\n  'Ridgeback de Rodesia',\n  'Rottweiler',\n  'Saint Bernard',\n  'Setter Inglés',\n  'Setter Irlandés',\n\n  // Razas Gigantes\n  'Dogo Alemán (Gran Danés)',\n  'Leonberger',\n  'Mastiff',\n  'Mastiff Napolitano',\n  'Mastín Español',\n  'Mastín Tibetano',\n  'Terranova',\n\n  // Razas Chilenas y Sudamericanas\n  'Terrier Chileno',\n  'Quiltro (Mestizo)',\n\n  // Otras razas comunes\n  'Mestizo',\n  'Criollo',\n  'Sin raza definida'\n];\n\nexport const CAT_BREEDS = [\n  // Razas de pelo corto\n  'Abisinio',\n  'American Curl',\n  'American Shorthair',\n  'American Wirehair',\n  'Bengalí',\n  'Bombay',\n  'British Shorthair',\n  'Burmés',\n  'Chartreux',\n  'Cornish Rex',\n  'Devon Rex',\n  'Egyptian Mau',\n  'European Shorthair',\n  'Exótico de Pelo Corto',\n  'Habana Brown',\n  'Japanese Bobtail',\n  'Korat',\n  'Manx',\n  'Mau Egipcio',\n  'Ocicat',\n  'Oriental',\n  'Russian Blue',\n  'Scottish Fold',\n  'Selkirk Rex',\n  'Siamés',\n  'Singapura',\n  'Sphynx',\n  'Tonkinés',\n\n  // Razas de pelo largo\n  'Angora Turco',\n  'Balinés',\n  'Birmano',\n  'Maine Coon',\n  'Noruego del Bosque',\n  'Persa',\n  'Ragdoll',\n  'Sagrado de Birmania',\n  'Siberiano',\n  'Somali',\n  'Van Turco',\n\n  // Razas menos comunes\n  'Curl Americano',\n  'LaPerm',\n  'Pixie Bob',\n  'Ragamuffin',\n  'Snowshoe',\n\n  // Categorías generales\n  'Mestizo',\n  'Criollo',\n  'Común Europeo',\n  'Sin raza definida'\n];\n\nexport const getBreedsBySpecies = (species: string): string[] => {\n  switch (species.toLowerCase()) {\n    case 'perro':\n    case 'canino':\n      return DOG_BREEDS;\n    case 'gato':\n    case 'felino':\n      return CAT_BREEDS;\n    default:\n      return ['Sin raza definida', 'Mestizo'];\n  }\n};","size_bytes":3612},"client/src/lib/vaccineCalculator.ts":{"content":"// Calculadora de fechas de próximas vacunas según vigencia\nexport interface VaccineSchedule {\n  vaccineType: string;\n  standardDuration: number; // en días\n  description: string;\n}\n\nexport const VACCINE_SCHEDULES: Record<string, VaccineSchedule> = {\n  // Vacunas para perros\n  'distemper': {\n    vaccineType: 'Distemper',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'parvovirus': {\n    vaccineType: 'Parvovirus',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'hepatitis': {\n    vaccineType: 'Hepatitis/Adenovirus',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'parainfluenza': {\n    vaccineType: 'Parainfluenza',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'leptospirosis': {\n    vaccineType: 'Leptospirosis',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'bordetella': {\n    vaccineType: 'Bordetella (Tos de las Perreras)',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'rabia_perro': {\n    vaccineType: 'Antirrábica',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n\n  // Vacunas para gatos\n  'panleucopenia': {\n    vaccineType: 'Panleucopenia Felina',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'rinotraqueitis': {\n    vaccineType: 'Rinotraqueitis Felina',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'calicivirus': {\n    vaccineType: 'Calicivirus Felino',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'leucemia': {\n    vaccineType: 'Leucemia Felina (FeLV)',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'rabia_gato': {\n    vaccineType: 'Antirrábica',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n\n  // Vacunas combinadas comunes\n  'quintuple': {\n    vaccineType: 'Quíntuple (Distemper, Hepatitis, Parvovirus, Parainfluenza, Leptospirosis)',\n    standardDuration: 365,\n    description: 'Anual'\n  },\n  'triple_felina': {\n    vaccineType: 'Triple Felina (Panleucopenia, Rinotraqueitis, Calicivirus)',\n    standardDuration: 365,\n    description: 'Anual'\n  }\n};\n\nexport interface VaccinationCalculationParams {\n  vaccinationDate: string;\n  customDuration?: number; // días personalizados\n  vaccineType?: string;\n}\n\nexport interface VaccinationResult {\n  nextDueDate: string;\n  daysUntilDue: number;\n  isOverdue: boolean;\n  validityPeriod: string;\n  alertLevel: 'green' | 'yellow' | 'red';\n}\n\nexport class VaccineCalculator {\n  \n  static calculateNextVaccination(params: VaccinationCalculationParams): VaccinationResult {\n    const { vaccinationDate, customDuration, vaccineType } = params;\n    \n    const vaccinationDateObj = new Date(vaccinationDate);\n    const today = new Date();\n    \n    // Determinar duración (personalizada o estándar)\n    let durationDays = customDuration;\n    \n    if (!durationDays && vaccineType) {\n      const schedule = this.findVaccineSchedule(vaccineType);\n      durationDays = schedule?.standardDuration || 365;\n    }\n    \n    if (!durationDays) {\n      durationDays = 365; // Por defecto 1 año\n    }\n    \n    // Calcular fecha de próxima vacuna\n    const nextDueDate = new Date(vaccinationDateObj);\n    nextDueDate.setDate(nextDueDate.getDate() + durationDays);\n    \n    // Calcular días hasta vencimiento\n    const diffTime = nextDueDate.getTime() - today.getTime();\n    const daysUntilDue = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    // Determinar estado y nivel de alerta\n    const isOverdue = daysUntilDue < 0;\n    const alertLevel = this.getAlertLevel(daysUntilDue);\n    \n    // Formatear período de validez\n    const validityPeriod = this.formatValidityPeriod(durationDays);\n    \n    return {\n      nextDueDate: nextDueDate.toISOString().split('T')[0],\n      daysUntilDue,\n      isOverdue,\n      validityPeriod,\n      alertLevel\n    };\n  }\n  \n  private static findVaccineSchedule(vaccineType: string): VaccineSchedule | undefined {\n    const normalizedType = vaccineType.toLowerCase();\n    \n    // Buscar coincidencia exacta o parcial\n    for (const [key, schedule] of Object.entries(VACCINE_SCHEDULES)) {\n      if (normalizedType.includes(key) || \n          schedule.vaccineType.toLowerCase().includes(normalizedType) ||\n          normalizedType.includes(schedule.vaccineType.toLowerCase())) {\n        return schedule;\n      }\n    }\n    \n    return undefined;\n  }\n  \n  private static getAlertLevel(daysUntilDue: number): 'green' | 'yellow' | 'red' {\n    if (daysUntilDue < 0) {\n      return 'red'; // Vencida\n    } else if (daysUntilDue <= 30) {\n      return 'yellow'; // Próxima a vencer\n    } else {\n      return 'green'; // Vigente\n    }\n  }\n  \n  private static formatValidityPeriod(days: number): string {\n    if (days === 365) {\n      return '1 año';\n    } else if (days === 730) {\n      return '2 años';\n    } else if (days === 1095) {\n      return '3 años';\n    } else if (days >= 365) {\n      const years = Math.floor(days / 365);\n      const remainingDays = days % 365;\n      if (remainingDays === 0) {\n        return `${years} año${years > 1 ? 's' : ''}`;\n      } else {\n        return `${years} año${years > 1 ? 's' : ''} y ${remainingDays} días`;\n      }\n    } else if (days >= 30) {\n      const months = Math.floor(days / 30);\n      const remainingDays = days % 30;\n      if (remainingDays === 0) {\n        return `${months} mes${months > 1 ? 'es' : ''}`;\n      } else {\n        return `${months} mes${months > 1 ? 'es' : ''} y ${remainingDays} días`;\n      }\n    } else {\n      return `${days} día${days > 1 ? 's' : ''}`;\n    }\n  }\n  \n  static getVaccineRecommendations(species: string, age?: number): string[] {\n    const recommendations: string[] = [];\n    \n    if (species.toLowerCase().includes('perro') || species.toLowerCase().includes('canino')) {\n      recommendations.push(\n        'Quíntuple (Distemper, Hepatitis, Parvovirus, Parainfluenza, Leptospirosis)',\n        'Antirrábica',\n        'Bordetella (Tos de las Perreras)'\n      );\n    } else if (species.toLowerCase().includes('gato') || species.toLowerCase().includes('felino')) {\n      recommendations.push(\n        'Triple Felina (Panleucopenia, Rinotraqueitis, Calicivirus)',\n        'Antirrábica',\n        'Leucemia Felina (FeLV)'\n      );\n    }\n    \n    return recommendations;\n  }\n  \n  static getDewormingSchedule(): { internal: string, external: string } {\n    return {\n      internal: 'Cada 3-6 meses según riesgo',\n      external: 'Mensual o según exposición a parásitos'\n    };\n  }\n}","size_bytes":6414}}}